{
  "questions": [
    {
      "correctAns": "1",
      "explaination": "Case is always significant.",
      "mark": "2",
      "options1": "yes",
      "options2": "no",
      "options3": "machine dependent",
      "options4": "none of the mentioned",
      "qsn": "Is Python case sensitive when dealing with identifiers?",
      "qsnNumber": "1"
    },
    {
      "correctAns": "4",
      "explaination": "Identifiers can be of any length.",
      "mark": "2",
      "options1": "31 characters",
      "options2": "63 characters",
      "options3": "79 characters",
      "options4": "none of the mentioned",
      "qsn": "What is the maximum possible length of an identifier?",
      "qsnNumber": "2"
    },
    {
      "correctAns": "4",
      "explaination": "All the statements will execute successfully but at the cost of reduced readability.",
      "mark": "2",
      "options1": "_a = 1",
      "options2": "__a = 1",
      "options3": "__str__ = 1",
      "options4": "none of the mentioned",
      "qsn": "Which of the following is invalid?",
      "qsnNumber": "3"
    },
    {
      "correctAns": "2",
      "explaination": "Variable names should not start with a number.",
      "mark": "2",
      "options1": "my_string_1",
      "options2": "1st_string",
      "options3": "foo",
      "options4": "_",
      "qsn": "Which of the following is an invalid variable?",
      "qsnNumber": "4"
    },
    {
      "correctAns": "1",
      "explaination": "As Python has no concept of private variables, leading underscores are used to indicate variables that must not be accessed from outside the class.",
      "mark": "2",
      "options1": "they are used to indicate a private variables of a class",
      "options2": "they confuse the interpreter",
      "options3": "they are used to indicate global variables",
      "options4": "they slow down execution",
      "qsn": "Why are local variable names beginning with an underscore discouraged?",
      "qsnNumber": "5"
    },
    {
      "correctAns": "1",
      "explaination": "eval can be used as a variable.",
      "mark": "2",
      "options1": "eval",
      "options2": "assert",
      "options3": "nonlocal",
      "options4": "pass",
      "qsn": "Which of the following is not a keyword?",
      "qsnNumber": "6"
    },
    {
      "correctAns": "4",
      "explaination": "True, False and None are capitalized while the others are in lower case.",
      "mark": "2",
      "options1": "lower case",
      "options2": "UPPER CASE",
      "options3": "Capitalized",
      "options4": "None of the mentioned",
      "qsn": "All keywords in Python are in",
      "qsnNumber": "7"
    },
    {
      "correctAns": "1",
      "explaination": "Variable names can be of any length.",
      "mark": "2",
      "options1": "unlimited length",
      "options2": "all private members must have leading and trailing underscores",
      "options3": "underscore and ampersand are the only two special characters allowed",
      "options4": "none of the mentioned",
      "qsn": "Which of the following is true for variable names in Python?",
      "qsnNumber": "8"
    },
    {
      "correctAns": "2",
      "explaination": "Spaces are not allowed in variable names.",
      "mark": "2",
      "options1": "abc = 1,000,000",
      "options2": "a b c = 1000 2000 3000",
      "options3": "a,b,c = 1000, 2000, 3000",
      "options4": "a_b_c = 1,000,000",
      "qsn": "Which of the following is an invalid statement?",
      "qsnNumber": "9"
    },
    {
      "correctAns": "2",
      "explaination": "in is a keyword.",
      "mark": "2",
      "options1": "__init__",
      "options2": "in",
      "options3": "it",
      "options4": "on",
      "qsn": "Which of the following cannot be a variable?",
      "qsnNumber": "10"
    },
    {
      "correctAns": "2",
      "explaination": "In python, power operator is x**y i.e. 2**3=8.",
      "mark": "2",
      "options1": "X^y",
      "options2": "X**y",
      "options3": "X^^y",
      "options4": "None of the mentioned",
      "qsn": "Which is the correct operator for power(xy)?",
      "qsnNumber": "11"
    },
    {
      "correctAns": "2",
      "explaination": "When both of the operands are integer then python chops out the fraction part and gives you the round off value, to get the accurate answer use floor division. This is floor division. For ex, 5/2 = 2.5 but both of the operands are integer so answer of this expression in python is 2.To get the 2.5 answer, use floor division.",
      "mark": "2",
      "options1": "/",
      "options2": "//",
      "options3": "%",
      "options4": "None of the mentioned",
      "qsn": "Which one of these is floor division?",
      "qsnNumber": "12"
    },
    {
      "correctAns": "2",
      "explaination": "Modulus operator gives remainder. So, 22%3 gives the remainder, that is, 1.",
      "mark": "2",
      "options1": "7",
      "options2": "1",
      "options3": "0",
      "options4": "5",
      "qsn": "What is answer of this expression, 22 % 3 is?",
      "qsnNumber": "13"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "Left to Right",
      "options2": "Right to Left",
      "options3": "Can’t say",
      "options4": "None of the mentioned",
      "qsn": "Operators with the same precedence are evaluated in which manner?",
      "qsnNumber": "14"
    },
    {
      "correctAns": "3",
      "explaination": "First this expression will solve 1**3 because exponential have higher precedence than multiplication, so 1**3 = 1 and 3*1 = 3. Final answer is 3.",
      "mark": "2",
      "options1": "27",
      "options2": "9",
      "options3": "3",
      "options4": "1",
      "qsn": "What is the output of this expression, 3*1**3?",
      "qsnNumber": "15"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "Addition and Subtraction",
      "options2": "Multiplication and Division",
      "options3": "Both Addition and Subtraction AND Multiplication and Division",
      "options4": "None of the mentioned",
      "qsn": "Which one of the following have the same precedence?",
      "qsnNumber": "16"
    },
    {
      "correctAns": "4",
      "explaination": "Just remember: PEMDAS, that is, Parenthesis, Exponentiation, Division, Multiplication, Addition, Subtraction. Note that the precedence order of Division and Multiplication is the same. Likewise, the order of Addition and Subtraction is also the same.",
      "mark": "2",
      "options1": "Exponential",
      "options2": "Addition",
      "options3": "Multiplication",
      "options4": "Parentheses",
      "qsn": "Which one of the following have the highest precedence in the expression?",
      "qsnNumber": "17"
    },
    {
      "correctAns": "4",
      "explaination": "Class is a user defined data type. ",
      "mark": "2",
      "options1": "Lists",
      "options2": "Dictionary",
      "options3": "Tuples",
      "options4": "Class",
      "qsn": "Which of these in not a core data type?",
      "qsnNumber": "18"
    },
    {
      "correctAns": "4",
      "explaination": "Python shell throws a NoneType object back. ",
      "mark": "2",
      "options1": "int",
      "options2": "bool",
      "options3": "void",
      "options4": "None",
      "qsn": "Given a function that does not return any value, What value is thrown by default when executed in shell.",
      "qsnNumber": "19"
    },
    {
      "correctAns": "1",
      "explaination": "Execute help(round) in the shell to get details of the parameters that are passed into the round function.",
      "mark": "2",
      "options1": "round(45.8)",
      "options2": "round(6352.898,2,5)",
      "options3": "round()",
      "options4": "round(7463.123,2,1)",
      "qsn": "Which of the following will run without errors ?",
      "qsnNumber": "20"
    },
    {
      "correctAns": "1",
      "explaination": "Execute help(id) to find out details in python shell.id returns a integer value that is unique.",
      "mark": "2",
      "options1": "int",
      "options2": "float",
      "options3": "bool",
      "options4": "dict",
      "qsn": "What is the return type of function id ?",
      "qsnNumber": "21"
    },
    {
      "correctAns": "2",
      "explaination": "Mango is not defined hence name error.",
      "mark": "2",
      "options1": "SyntaxError",
      "options2": "NameError",
      "options3": "ValueError",
      "options4": "TypeError",
      "qsn": "What error occurs when you execute? -> apple = mango",
      "qsnNumber": "22"
    },
    {
      "correctAns": "1",
      "explaination": "List data type can store any values within it.",
      "mark": "2",
      "options1": "list",
      "options2": "dictionary",
      "options3": "array",
      "options4": "tuple",
      "qsn": "What data type is the object below ? -> L = [1, 23, ‘hello’, 1].",
      "qsnNumber": "23"
    },
    {
      "correctAns": "4",
      "explaination": "Dictionary stores values in terms of keys and values.",
      "mark": "2",
      "options1": "list",
      "options2": "tuple",
      "options3": "class",
      "options4": "dictionary",
      "qsn": "In order to store values in terms of key and value we use what core data type.",
      "qsnNumber": "24"
    },
    {
      "correctAns": "3",
      "explaination": "Carefully look at the colons.",
      "mark": "2",
      "options1": "‘”Once upon a time…”, she said.’",
      "options2": "“He said, ‘Yes!'”",
      "options3": "‘3\’",
      "options4": "”’That’s okay”’",
      "qsn": "Which of the following results in a SyntaxError ?",
      "qsnNumber": "25"
    },
    {
      "correctAns": "3",
      "explaination": "Execute in the shell.",
      "mark": "2",
      "options1": "print(‘hello’, ‘how’, ‘are’, ‘you’)",
      "options2": "print(‘hello’, ‘how’, ‘are’, ‘you’ + ‘-‘ * 4)",
      "options3": "print(‘hello-‘ + ‘how-are-you’)",
      "options4": "print(‘hello’ + ‘-‘ + ‘how’ + ‘-‘ + ‘are’ + ‘you’)",
      "qsn": "Select all options that print hello-how-are-you",
      "qsnNumber": "26"
    },
    {
      "correctAns": "1",
      "explaination": "Executle help(math.trunc) to get details.",
      "mark": "2",
      "options1": "int",
      "options2": "bool",
      "options3": "float",
      "options4": "None",
      "qsn": "What is the return value of trunc() ?",
      "qsnNumber": "27"
    },
    {
      "correctAns": "2",
      "explaination": "Neither of 0.1, 0.2 and 0.3 can be represented accurately in binary. The round off errors from 0.1 and 0.2 accumulate and hence there is a difference of 5.5511e-17 between (0.1 + 0.2) and 0.3.",
      "mark": "2",
      "options1": "True",
      "options2": "False",
      "options3": "Machine dependent",
      "options4": "Error",
      "qsn": "What is the output of print 0.1 + 0.2 == 0.3?",
      "qsnNumber": "28"
    },
    {
      "correctAns": "3",
      "explaination": "l (or L) stands for long.",
      "mark": "2",
      "options1": "k = 2 + 3j",
      "options2": "k = complex(2, 3)",
      "options3": "k = 2 + 3l",
      "options4": "k = 2 + 3J",
      "qsn": "Which of the following is not a complex number?",
      "qsnNumber": "29"
    },
    {
      "correctAns": "3",
      "explaination": "Infinity is a special case of floating point numbers. It can be obtained by float(‘inf’).",
      "mark": "2",
      "options1": "Boolean",
      "options2": "Integer",
      "options3": "Float",
      "options4": "Complex",
      "qsn": "What is the type of inf?",
      "qsnNumber": "30"
    },
    {
      "correctAns": "1",
      "explaination": "~x is equivalent to -(x+1).",
      "mark": "2",
      "options1": "-5",
      "options2": "-4",
      "options3": "-3",
      "options4": "+3",
      "qsn": "What does ~4 evaluate to?",
      "qsnNumber": "31"
    },
    {
      "correctAns": "1",
      "explaination": "~x is equivalent to -(x+1).",
      "mark": "2",
      "options1": "+5",
      "options2": "-11",
      "options3": "+11",
      "options4": "-5",
      "qsn": "What does ~~~~~~5 evaluate to?",
      "qsnNumber": "32"
    },
    {
      "correctAns": "4",
      "explaination": "Numbers starting with a 0 are octal numbers but 9 isn’t allowed in octal numbers.",
      "mark": "2",
      "options1": "x = 0b101",
      "options2": "x = 0x4f5",
      "options3": "x = 19023",
      "options4": "x = 03964",
      "qsn": "Which of the following is incorrect?",
      "qsnNumber": "33"
    },
    {
      "correctAns": "1",
      "explaination": "cmp(x, y) returns 1 if x > y, 0 if x == y and -1 if x < y.",
      "mark": "2",
      "options1": "1",
      "options2": "0",
      "options3": "True",
      "options4": "False",
      "qsn": "What is the result of cmp(3, 1)?",
      "qsnNumber": "34"
    },
    {
      "correctAns": "4",
      "explaination": "‘+’ cannot be converted to a float.",
      "mark": "2",
      "options1": "float(‘inf’)",
      "options2": "float(‘nan’)",
      "options3": "float(’56’+’78’)",
      "options4": "float(’12+34′)",
      "qsn": "Which of the following is incorrect?",
      "qsnNumber": "35"
    },
    {
      "correctAns": "2",
      "explaination": "Python rounds off numbers away from 0 when the number to be rounded off is exactly halfway through. round(0.5) is 1 and round(-0.5) is -1.",
      "mark": "2",
      "options1": "1.0",
      "options2": "2.0",
      "options3": "0.0",
      "options4": "None of the mentioned",
      "qsn": "What is the result of round(0.5) – round(-0.5)?",
      "qsnNumber": "36"
    },
    {
      "correctAns": "4",
      "explaination": "^ is the Binary XOR operator.",
      "mark": "2",
      "options1": "81",
      "options2": "12",
      "options3": "0.75",
      "options4": "7",
      "qsn": "What does 3 ^ 4 evaluate to?",
      "qsnNumber": "37"
    },
    {
      "correctAns": "2",
      "explaination": "The order of precedence is: %, +. Hence the expression above, on simplification results in 4 + 3 = 7. Hence the result is 7.",
      "mark": "2",
      "options1": "4",
      "options2": "7",
      "options3": "2",
      "options4": "0",
      "qsn": "The value of the expression: 4 + 3 % 5",
      "qsnNumber": "38"
    },
    {
      "correctAns": "2",
      "explaination": "The above expression is evaluated as: 16%15//16, which is equal to 1//16, which results in 0.",
      "mark": "2",
      "options1": "0.0",
      "options2": "0",
      "options3": "1.0",
      "options4": "1",
      "qsn": "Evaluate the expression given if A= 16 and B = 15: A % B // A",
      "qsnNumber": "39"
    },
    {
      "correctAns": "4",
      "explaination": "All of the operators shown above have associativity from left to right, except exponentiation operator (**) which has its associativity from right to left.",
      "mark": "2",
      "options1": "+",
      "options2": "//",
      "options3": "%",
      "options4": "**",
      "qsn": "Which of the following operators has its associativity from right to left?",
      "qsnNumber": "40"
    },
    {
      "correctAns": "2",
      "explaination": "The expression shown above is an example of explicit conversion. It is evaluated as int(43.55+1) = int(44.55) = 44. Hence the result of this expression is 44.",
      "mark": "2",
      "options1": "43",
      "options2": "44",
      "options3": "22",
      "options4": "23",
      "qsn": "What is the value of x if: x = int(43.55+2/2)",
      "qsnNumber": "41"
    },
    {
      "correctAns": "1",
      "explaination": "The result of the expression shown above is (6.0, 16.0). This is because the result is automatically rounded off to one decimal place.",
      "mark": "2",
      "options1": "(6.0, 16.0)",
      "options2": "(6.00, 16.00)",
      "options3": "(6, 16)",
      "options4": "(6.00, 16.0)",
      "qsn": "What is the value of the expression: 2+4.00, 2**4.0",
      "qsnNumber": "42"
    },
    {
      "correctAns": "3",
      "explaination": "// is the operator for truncation division. It it called so because it returns only the integer part of the quotient, truncating the decimal part. For example: 20//3 = 6.",
      "mark": "2",
      "options1": "/",
      "options2": "%",
      "options3": "//",
      "options4": "|",
      "qsn": "Which of the following is the truncation division operator?",
      "qsnNumber": "43"
    },
    {
      "correctAns": "4",
      "explaination": "Expression is evaluated as: 2**9, which is equal to 512.",
      "mark": "2",
      "options1": "64",
      "options2": "128",
      "options3": "256",
      "options4": "512",
      "qsn": "What are the values of the expressions: 2**(3**2)",
      "qsnNumber": "44"
    },
    {
      "correctAns": "1",
      "explaination": "Expression is evaluated as 8**2, which is equal to 64.",
      "mark": "2",
      "options1": "64",
      "options2": "128",
      "options3": "256",
      "options4": "512",
      "qsn": "What are the values of the expressions: (2**3)**2",
      "qsnNumber": "45"
    },
    {
      "correctAns": "4",
      "explaination": "The expression is evaluated as 2**(3**2). This is because the associativity of ** operator is from right to left. Hence the result of the third expression is 512.",
      "mark": "2",
      "options1": "64",
      "options2": "128",
      "options3": "256",
      "options4": "512",
      "qsn": "What are the values of the expressions: 2**3**2",
      "qsnNumber": "46"
    },
    {
      "correctAns": "1",
      "explaination": "The above expressions are evaluated as: 2/2, 8/2, which is equal to (1.0, 4.0).",
      "mark": "2",
      "options1": "(1.0, 4.0)",
      "options2": "(1.0, 1.0)",
      "options3": "(4.0. 1.0)",
      "options4": "(4.0, 4.0)",
      "qsn": "What is the value of the expression: 8/4/2, 8/(4/2)",
      "qsnNumber": "47"
    },
    {
      "correctAns": "2",
      "explaination": "The expression shown above is evaluated as: float( 7+1) = float(8) = 8.0. Hence the result of this expression is 8.0.",
      "mark": "2",
      "options1": "8",
      "options2": "8.0",
      "options3": "8.3",
      "options4": "8.33",
      "qsn": "What is the value of the expression: float(22//3+3/3)",
      "qsnNumber": "48"
    },
    {
      "correctAns": "2",
      "explaination": "The result of the expression shown above is 1.0 because print rounds off digits.",
      "mark": "2",
      "options1": "Error",
      "options2": "1.0",
      "options3": "1.00",
      "options4": "1",
      "qsn": "What is the output of the expression: print(4.00/(2.0+2.0))",
      "qsnNumber": "49"
    },
    {
      "correctAns": "4",
      "explaination": "The expression shown above is evaluated as: 2+9*(36-8)/10, which simplifies to give 2+9*(2.8), which is equal to 2+25.2 = 27.2. Hence the result of this expression is 27.2.",
      "mark": "2",
      "options1": "30.0",
      "options2": "30.8",
      "options3": "28.4",
      "options4": "27.2",
      "qsn": "Consider the expression & consider the value of X is: X = 2+9*((3*12)-8)/10",
      "qsnNumber": "50"
    },
    {
      "correctAns": "3",
      "explaination": "Coercion is the implicit (automatic) conversion of operands to a common type. Coercion is automatically performed on mixed-type expressions. The expression 1.7 % 2 is evaluated as 1.7 % 2.0 (that is, automatic conversion of int to float).",
      "mark": "2",
      "options1": "4.7 – 1.5",
      "options2": "7.9 * 6.3",
      "options3": "1.7 % 2",
      "options4": "3.4 + 4.6",
      "qsn": "Which of the following expressions involves coercion when evaluated in Python?",
      "qsnNumber": "51"
    },
    {
      "correctAns": "1",
      "explaination": "The expressions are evaluated as: 4%3 and 6//2 respectively. This results in the answer (1,3). This is because the associativity of both of the expressions shown above is left to right.",
      "mark": "2",
      "options1": "(1,3)",
      "options2": "(0,3)",
      "options3": "(1,0)",
      "options4": "(3,1)",
      "qsn": "What is the value of the expression: 24//6%3, 24//4//2",
      "qsnNumber": "52"
    },
    {
      "correctAns": "2",
      "explaination": "The highest precedence is that of the exponentiation operator, that is of **.",
      "mark": "2",
      "options1": "<<, >>",
      "options2": "**",
      "options3": "|",
      "options4": "%",
      "qsn": "Which among the list of operators has the highest precedence: +, -, **, %, /, <<, >>, |",
      "qsnNumber": "53"
    },
    {
      "correctAns": "3",
      "explaination": "The above expression is an example of explicit conversion. It is evaluated as: float(4+int(2.39)%2) = float(4+2%2) = float(4+0) = 4.0. Hence the result of this expression is 4.0.",
      "mark": "2",
      "options1": "5.0",
      "options2": "5",
      "options3": "4.0",
      "options4": "4",
      "qsn": "What is the value of the expression: float(4+int(2.39)%2)",
      "qsnNumber": "54"
    },
    {
      "correctAns": "1",
      "explaination": "Type conversion is nothing but explicit conversion of operands to a specific type. Options ‘b’ and ‘c’ are examples of implicit conversion whereas option ‘a’ is an example of explicit conversion or type conversion.",
      "mark": "2",
      "options1": "4.0 + float(3)",
      "options2": "5.3 + 6.3",
      "options3": "5.0 + 3",
      "options4": "3 + 7",
      "qsn": "Which of the following expressions is an example of type conversion?",
      "qsnNumber": "55"
    },
    {
      "correctAns": "4",
      "explaination": "All of the above examples show explicit conversion. However the expression int(’10.8’) results in an error.",
      "mark": "2",
      "options1": "float(‘10’)",
      "options2": "int(‘10’)",
      "options3": "float(’10.8’)",
      "options4": "int(’10.8’)",
      "qsn": "Which of the following expressions results in an error?",
      "qsnNumber": "56"
    },
    {
      "correctAns": "2",
      "explaination": "The order of precedence is: **, //, +. The expression 4+2**5//10 is evaluated as 4+32//10, which is equal to 4+3 = 7. Hence the result of the expression shown above is 7.",
      "mark": "2",
      "options1": "3",
      "options2": "7",
      "options3": "77",
      "options4": "0",
      "qsn": "What is the value of the expression: 4+2**5//10",
      "qsnNumber": "57"
    },
    {
      "correctAns": "4",
      "explaination": "The binary form of 1 is 0001. The expression x<<2 implies we are performing bitwise left shift on x. This shift yields the value: 0100, which is the binary form of the number 4.",
      "mark": "2",
      "options1": "8",
      "options2": "1",
      "options3": "2",
      "options4": "4",
      "qsn": "What is the result of the snippet of code shown if x=1: x<<2",
      "qsnNumber": "58"
    },
    {
      "correctAns": "2",
      "explaination": "The binary form of the number 29 is 11101. Hence the output of this expression is ‘0b11101’.",
      "mark": "2",
      "options1": "0b10111",
      "options2": "0b11101",
      "options3": "0b11111",
      "options4": "0b11011",
      "qsn": "The output of the expression is: bin(29)",
      "qsnNumber": "59"
    },
    {
      "correctAns": "1",
      "explaination": "When the value of x is equal to 8 (1000), then x>>2 (bitwise right shift) yields the value 0010, which is equal to 2. Hence the value of x is 8.",
      "mark": "2",
      "options1": "8",
      "options2": "4",
      "options3": "2",
      "options4": "1",
      "qsn": "What is the value of x if: x>>2=2",
      "qsnNumber": "60"
    },
    {
      "correctAns": "1",
      "explaination": "The result of the expression shown will be 1011. This is because we have not specified the base in this expression. Hence it automatically takes the base as 10.",
      "mark": "2",
      "options1": "1011",
      "options2": "11",
      "options3": "13",
      "options4": "1101",
      "qsn": "What is the result of the expression: int(1011)?",
      "qsnNumber": "61"
    },
    {
      "correctAns": "4",
      "explaination": "The expression int(‘1111’,2) gives the result 15. The expression int(‘1111’, 10) will give the result 1111.",
      "mark": "2",
      "options1": "int(1111,10)",
      "options2": "int(‘1111’,10)",
      "options3": "int(1111,2)",
      "options4": "int(‘1111’,2)",
      "qsn": " To find the decimal value of 1111, that is 15, we can use the function: ",
      "qsnNumber": "62"
    },
    {
      "correctAns": "3",
      "explaination": "The symbol ‘&’ represents bitwise AND. This gives 1 if both the bits are equal to 1, else it gives 0. The binary form of 15 is 1111 and that of 12 is 1100. Hence on performing the bitwise AND operation, we get 1100, which is equal to 12.",
      "mark": "2",
      "options1": "b1101",
      "options2": "0b1101",
      "options3": "12",
      "options4": "1101",
      "qsn": "What is the result of the expression if x=15 and y=12: x & y",
      "qsnNumber": "63"
    },
    {
      "correctAns": "3",
      "explaination": "The expression int(1011,2) results in an error. Had we written this expression as int(‘1011’,2), then there would not be an error.",
      "mark": "2",
      "options1": "int(1011)",
      "options2": "int(‘1011’,23)",
      "options3": "int(1011,2)",
      "options4": "int(‘1011’)",
      "qsn": "Which of the following expressions results in an error?",
      "qsnNumber": "65"
    },
    {
      "correctAns": "2",
      "explaination": "The ^ operator represent bitwise XOR operation. &: bitwise AND, | : bitwise OR and ! represents bitwise NOT.",
      "mark": "2",
      "options1": "&",
      "options2": "^",
      "options3": "|",
      "options4": "!",
      "qsn": " Which of the following represents the bitwise XOR operator?",
      "qsnNumber": "66"
    },
    {
      "correctAns": "4",
      "explaination": "The prefix 0x specifies that the value is hexadecimal in nature. When we convert this hexadecimal value to binary form, we get the result as: ‘0b1000’.",
      "mark": "2",
      "options1": "0bx1000",
      "options2": "8",
      "options3": "1000",
      "options4": "0b1000",
      "qsn": "What is the value of this expression: bin(0x8)",
      "qsnNumber": "67"
    },
    {
      "correctAns": "3",
      "explaination": "The binary value of 0x35 is 110101 and that of 0x75 is 1110101. On OR-ing these two values we get the output as: 1110101, which is equal to 117. Hence the result of the above expression is 117.",
      "mark": "2",
      "options1": "115",
      "options2": "116",
      "options3": "117",
      "options4": "118",
      "qsn": "What is the result of the expression: 0x35 | 0x75",
      "qsnNumber": "68"
    },
    {
      "correctAns": "1",
      "explaination": "The one’s complement of a value is obtained by simply changing all the 1’s to 0’s and all the 0’s to 1’s. Hence the one’s complement of 110010101 is 001101010.",
      "mark": "2",
      "options1": "001101010",
      "options2": "110010101",
      "options3": "001101011",
      "options4": "110010100",
      "qsn": "The one’s complement of 110010101 is:",
      "qsnNumber": "69"
    },
    {
      "correctAns": "3",
      "explaination": "Bitwise XOR gives 1 if either of the bits is 1 and 0 when both of the bits are 1.",
      "mark": "2",
      "options1": "OR",
      "options2": "AND",
      "options3": "XOR",
      "options4": "NOT",
      "qsn": "Bitwise _________ gives 1 if either of the bits is 1 and 0 when both of the bits are 1.",
      "qsnNumber": "70"
    },
    {
      "correctAns": "3",
      "explaination": " ^ is the XOR operator. The binary form of 4 is 0100 and that of 12 is 1100. Therefore, 0100^1100 is 1000, which is equal to 8.",
      "mark": "2",
      "options1": "2",
      "options2": "4",
      "options3": "8",
      "options4": "12",
      "qsn": "The result of the expression shown is: 4^12",
      "qsnNumber": "71"
    },
    {
      "correctAns": "3",
      "explaination": "Any odd number on being AND-ed with 1 always gives 1. Any even number on being AND-ed with this value always gives 0.",
      "mark": "2",
      "options1": "10",
      "options2": "2",
      "options3": "1",
      "options4": "0",
      "qsn": "Any odd number on being AND-ed with ________ always gives 1. Hint: Any even number on being AND-ed with this value always gives 0.",
      "qsnNumber": "72"
    },
    {
      "correctAns": "4",
      "explaination": "The output of bin(10-2)= 0b1000 and that of bin(12^4) is ob1000. Hence the output of the above expression is: 0b10000b1000.",
      "mark": "2",
      "options1": "0b10000",
      "options2": "0b10001000",
      "options3": "0b1000b1000",
      "options4": "0b10000b1000",
      "qsn": "What is the value of this expression: bin(10-2)+bin(12^4)",
      "qsnNumber": "73"
    },
    {
      "correctAns": "1",
      "explaination": "Let us consider an example wherein a=2. The binary form of 2 is 0010. When we left shift this value by 2, we get 1000, the value of which is 16. Hence if we want to multiply a given number ‘a’ by 4, we can use the expression: a<<2.",
      "mark": "2",
      "options1": "a<<2",
      "options2": "a<<4",
      "options3": "a>>2",
      "options4": "a>>4",
      "qsn": "Which of the following expressions can be used to multiply a given number ‘a’ by 4?",
      "qsnNumber": "74"
    },
    {
      "correctAns": "2",
      "explaination": "The binary form of -44 is 00101100. The one’s complement of this value is 11010011. On adding one to this we get: 11010100 (two’s complement).",
      "mark": "2",
      "options1": "1011011",
      "options2": "11010100",
      "options3": "11101011",
      "options4": "10110011",
      "qsn": "What is the two’s complement of -44?",
      "qsnNumber": "75"
    },
    {
      "correctAns": "2",
      "explaination": "Suppose we have an expression ~A. This is evaluated as: -A – 1. Therefore, the expression ~100 is evaluated as -100 – 1, which is equal to -101.",
      "mark": "2",
      "options1": "101",
      "options2": "-101",
      "options3": "100",
      "options4": "-100",
      "qsn": "What is the value of the expression: ~100?",
      "qsnNumber": "76"
    },
    {
      "correctAns": "1",
      "explaination": "The Boolean function returns true if the argument passed to the bool function does not amount to zero. In this example, the string ‘False’ is passed to the function bool. This does not amount to zero and hence the output is true.",
      "mark": "2",
      "options1": "True",
      "options2": "False",
      "options3": "No Output",
      "options4": "Error",
      "qsn": "The output of the snippet of code shown: bool(‘False’)",
      "qsnNumber": "77"
    },
    {
      "correctAns": "2",
      "explaination": "In this function, an empty list is passed to the function bool. Hence the output is false.",
      "mark": "2",
      "options1": "True",
      "options2": "False",
      "options3": "No Output",
      "options4": "Error",
      "qsn": "The output of the snippet of code shown: bool()",
      "qsnNumber": "78"
    },
    {
      "correctAns": "1",
      "explaination": "The line of code shown above can be simplified to state that ‘hello’ should be printed if the argument passed to the Boolean function amounts to zero, else ‘morning’ will be printed.",
      "mark": "2",
      "options1": "hello",
      "options2": "morning",
      "options3": "No Output",
      "options4": "Error",
      "qsn": "The output of the snippet of code shown: ['hello', 'morning'][bool('')]",
      "qsnNumber": "79"
    },
    {
      "correctAns": "1",
      "explaination": "The function not returns true if the argument amounts to false, and false if the argument amounts to true.",
      "mark": "2",
      "options1": "True",
      "options2": "False",
      "options3": "No Output",
      "options4": "Error",
      "qsn": "The output of the snippet of code shown: not(3>4)",
      "qsnNumber": "80"
    },
    {
      "correctAns": "2",
      "explaination": "The function not returns true if the argument amounts to false, and false if the argument amounts to true.",
      "mark": "2",
      "options1": "True",
      "options2": "False",
      "options3": "No Output",
      "options4": "Error",
      "qsn": "The output of the snippet of code shown: not(1&1)",
      "qsnNumber": "81"
    },
    {
      "correctAns": "1",
      "explaination": "The line of code can be translated to state that ‘f’ is printed if the argument passed to the Boolean function amount to zero. Else ‘t’ is printed. The argument given to the Boolean function in the above case is ‘spam’, which does not amount to zero. Hence the output is: t.",
      "mark": "2",
      "options1": "t",
      "options2": "f",
      "options3": "No Output",
      "options4": "Error",
      "qsn": "The output of the snippet of code shown: ['f', 't'][bool('spam')]",
      "qsnNumber": "82"
    },
    {
      "correctAns": "2",
      "explaination": "The expression not(10<20) returns false. The expression not(10>30) returns true. The and operation between false and true returns false. Hence the output is false.",
      "mark": "2",
      "options1": "True",
      "options2": "False",
      "options3": "No Output",
      "options4": "Error",
      "qsn": "The output of the snippet of code shown: not(10<20) and not(10>30)",
      "qsnNumber": "83"
    },
    {
      "correctAns": "3",
      "explaination": "The expression shown above results in the output 456.",
      "mark": "2",
      "options1": "000456",
      "options2": "456000",
      "options3": "456",
      "options4": "error",
      "qsn": "What is the output of the expression if x=456: print('%-06d'%x)",
      "qsnNumber": "84"
    },
    {
      "correctAns": "2",
      "explaination": "The above expression returns the output 000345. It adds the required number of zeroes before the given number in order to make the number of digits 6 (as specified in this case).",
      "mark": "2",
      "options1": "345000",
      "options2": "000345",
      "options3": "000000345",
      "options4": "345000000",
      "qsn": "What is the output of the expression if x=345: print(“%06d”%X)",
      "qsnNumber": "85"
    },
    {
      "correctAns": "4",
      "explaination": "In order to add ‘n’ blank spaces after a given string ‘S’, we use the formatting option:(“%-ns”%S).",
      "mark": "2",
      "options1": "print(“-ns”%S)",
      "options2": "print(“-ns”%S)",
      "options3": "print(“%ns”%S)",
      "options4": "print(“%-ns”%S)",
      "qsn": "Which of the following formatting options can be used in order to add ‘n’ blank spaces after a given string ‘S’?",
      "qsnNumber": "86"
    },
    {
      "correctAns": "3",
      "explaination": "The given number is -122. Here the total number of digits (including the negative sign) should be 6 according to the expression. In addition to this, there is a negative sign in the given expression. Hence the output will be – -00122.",
      "mark": "2",
      "options1": "-000122",
      "options2": "000122",
      "options3": "--00122",
      "options4": "-00122",
      "qsn": "What is the output of this expression if X= -122: print('-%06d'%x)",
      "qsnNumber": "87"
    },
    {
      "correctAns": "3",
      "explaination": "The expression shown above normally returns the value with 6 decimal points if it is not specified with any number. Hence the output of this expression will be: 34.000000 (6 decimal points).",
      "mark": "2",
      "options1": "34.00",
      "options2": "34.0000",
      "options3": "34.000000",
      "options4": "34.00000000",
      "qsn": "What is the result of the expression shown if x=34: print(“%f”%x)",
      "qsnNumber": "88"
    },
    {
      "correctAns": "2",
      "explaination": "The expression shown above rounds off the given number to the number of decimal places specified. Since the expression given specifies rounding off to two decimal places, the output of this expression will be 56.24. Had the value been x=56.234 (last digit being any number less than 5), the output would have been 56.23.",
      "mark": "2",
      "options1": "56.00",
      "options2": "56.24",
      "options3": "56.23",
      "options4": "0056.236",
      "qsn": "What is the result of the expression shown if x=56.236: print(%.2f'%x)",
      "qsnNumber": "89"
    },
    {
      "correctAns": "3",
      "explaination": "The output of the expression above will be 22.19. This expression specifies that the total number of digits (including the decimal point) should be 5, rounded off to two decimal places.",
      "mark": "2",
      "options1": "22.1900",
      "options2": "22.00000",
      "options3": "22.19",
      "options4": "22.20",
      "qsn": "What is the output of this expression if x=22.19: print('%5.2f'%x)",
      "qsnNumber": "90"
    },
    {
      "correctAns": "3",
      "explaination": "In the snippet of code, three values are inserted into the target string. When we insert more than one value, we should group the values on the right in a tuple. The % formatting expression operator expects either a single item or a tuple of one or more items on its right side.",
      "mark": "2",
      "options1": "Error",
      "options2": "1 hello you 4.0",
      "options3": "1 hello 4 you",
      "options4": "1 4 hello you",
      "qsn": "The output of the snippet of code shown: '%d %s %g you' %(1, 'hello', 4.0)",
      "qsnNumber": "91"
    },
    {
      "correctAns": "2",
      "explaination": "The code ‘There are %d %s birds.’ %(4, blue) results in the output: There are 4 blue birds. When we insert more than one value, we should group the values on the right in a tuple.",
      "mark": "2",
      "options1": "There are %g %d birds.’ %4 %blue",
      "options2": "There are %d %s birds.’ %(4, blue)",
      "options3": "There are %s %d birds.’ %[4, blue]",
      "options4": "There are %d %s birds.’ 4, blue",
      "qsn": "The output of which of the codes shown: 'There are 4 blue birds.'?",
      "qsnNumber": "92"
    },
    {
      "correctAns": "4",
      "explaination": "+ operator is concatenation operator.",
      "mark": "2",
      "options1": "a",
      "options2": "bc",
      "options3": "bca",
      "options4": "abc",
      "qsn": "What is the output when this statement is executed: >>>'a'+'bc'",
      "qsnNumber": "93"
    },
    {
      "correctAns": "3",
      "explaination": "Slice operation is performed on string.",
      "mark": "2",
      "options1": "a",
      "options2": "ab",
      "options3": "cd",
      "options4": "dc",
      "qsn": "What is the output when this statement is executed: >>>'abcd'[2:]",
      "qsnNumber": "94"
    },
    {
      "correctAns": "2",
      "explaination": "Execute in shell and check.",
      "mark": "2",
      "options1": "string.ascii_lowercase_string.digits",
      "options2": "string.ascii_lowercase+string.ascii_upercase",
      "options3": "string.letters",
      "options4": "string.lowercase_string.upercase",
      "qsn": "The output of executing string.ascii_letters can also be achieved by: ",
      "qsnNumber": "95"
    },
    {
      "correctAns": "3",
      "explaination": "+ is used to concatenate and * is used to multiply strings.",
      "mark": "2",
      "options1": "+",
      "options2": "*",
      "options3": "–",
      "options4": "All of the mentioned",
      "qsn": "What arithmetic operators cannot be used with strings ?",
      "qsnNumber": "96"
    },
    {
      "correctAns": "2",
      "explaination": "When prefixed with the letter ‘r’ or ‘R’ a string literal becomes a raw string and the escape sequences such as \n are not converted.",
      "mark": "2",
      "options1": "a new line and hello",
      "options2": "\nhello",
      "options3": "the letter r and then hello",
      "options4": "error",
      "qsn": "What is the output when this code is executed: >>>print r'\nhello'",
      "qsnNumber": "97"
    },
    {
      "correctAns": "3",
      "explaination": "String literal separated by whitespace are allowed. They are concatenated.",
      "mark": "2",
      "options1": "Error",
      "options2": "Output equivalent to print ‘new\nline’",
      "options3": "newline",
      "options4": "new line",
      "qsn": "What is the output when this code is executed: >>>print('new' 'line')",
      "qsnNumber": "98"
    },
    {
      "correctAns": "4",
      "explaination": "0xA and 0xB and 0xC are hexadecimal integer literals representing the decimal values 10,11 and 12 respectively. There sum is 33.",
      "mark": "2",
      "options1": "0xA0xB0xC",
      "options2": "Error",
      "options3": "0x22",
      "options4": "33",
      "qsn": "print(0xA + 0xB + 0xC) :",
      "qsnNumber": "99"
    },
    {
      "correctAns": "4",
      "explaination": "Max returns the character with the highest ascii value.",
      "mark": "2",
      "options1": "error",
      "options2": "u",
      "options3": "t",
      "options4": "y",
      "qsn": "What is the output when this code is executed: >>>max('what are you')",
      "qsnNumber": "100"
    },
    {
      "correctAns": "1",
      "explaination": "l occurs twice in hello.",
      "mark": "2",
      "options1": "2",
      "options2": "1",
      "options3": "None",
      "options4": "0",
      "qsn": "Given a string example=”hello” what is the output of example.count(l)",
      "qsnNumber": "101"
    },
    {
      "correctAns": "3",
      "explaination": "__add__ is another method that can be used for concatenation.",
      "mark": "2",
      "options1": "s3 = s1 . s2",
      "options2": "s3 = s1.add(s2)",
      "options3": "s3 = s1.__add__(s2)",
      "options4": "s3 = s1 * s2",
      "qsn": "To concatenate two strings to a third what statements are applicable?",
      "qsnNumber": "102"
    },
    {
      "correctAns": "1",
      "explaination": "Execute in shell to verify.",
      "mark": "2",
      "options1": "A",
      "options2": "B",
      "options3": "a",
      "options4": "Error",
      "qsn": "What is the output when this statement is executed: >>>chr(ord('A'))",
      "qsnNumber": "103"
    },
    {
      "correctAns": "3",
      "explaination": "Execute in the shell to verify. ",
      "mark": "2",
      "options1": "a",
      "options2": "b",
      "options3": "c",
      "options4": "A",
      "qsn": "What is the output when this statement is executed: >>>print(chr(ord('b')+1))",
      "qsnNumber": "104"
    },
    {
      "correctAns": "4",
      "explaination": "Execute help(string.strip) to find details.",
      "mark": "2",
      "options1": "\t\tWorld\n",
      "options2": "\t\tWorld\n",
      "options3": "\t\tWORLD\n",
      "options4": "World",
      "qsn": "Suppose s is “\t\tWorld\n”, what is s.strip() ?",
      "qsnNumber": "105"
    },
    {
      "correctAns": "4",
      "explaination": "Format function returns a string.",
      "mark": "2",
      "options1": "Error",
      "options2": "int",
      "options3": "bool",
      "options4": "str",
      "qsn": "The format function, when applied on a string returns :",
      "qsnNumber": "106"
    },
    {
      "correctAns": "3",
      "explaination": "Cannot concatenate str and int objects.",
      "mark": "2",
      "options1": "hello123",
      "options2": "hello",
      "options3": "Error",
      "options4": "hello6",
      "qsn": "What is the output of “hello”+1+2+3 ?",
      "qsnNumber": "107"
    },
    {
      "correctAns": "2",
      "explaination": "ASCII value of b is one more than a. Hence the output of this code is 98-97, which is equal to 1.",
      "mark": "2",
      "options1": "0",
      "options2": "1",
      "options3": "-1",
      "options4": "2",
      "qsn": "What will be displayed by print(ord(‘b’) – ord(‘a’)) ?",
      "qsnNumber": "108"
    },
    {
      "correctAns": "3",
      "explaination": "str is used to represent strings in python.",
      "mark": "2",
      "options1": "int",
      "options2": "bool",
      "options3": "str",
      "options4": "String",
      "qsn": "Say s=”hello” what will be the return value of type(s) ?",
      "qsnNumber": "110"
    },
    {
      "correctAns": "1",
      "explaination": "Execute in shell to verify.",
      "mark": "2",
      "options1": "Heeeo",
      "options2": "Heelo",
      "options3": "Heleo",
      "options4": "None",
      "qsn": "What is “Hello”.replace(“l”, “e”)",
      "qsnNumber": "111"
    },
    {
      "correctAns": "3",
      "explaination": "__getitem(..) can be used to get character at index specified as parameter.",
      "mark": "2",
      "options1": "s[].",
      "options2": "s.getitem(3)",
      "options3": "s.__getitem__(3)",
      "options4": "s.getItem(3)",
      "qsn": "To retrieve the character at index 3 from string s=”Hello” what command do we execute (multiple answers allowed) ?",
      "qsnNumber": "112"
    },
    {
      "correctAns": "1",
      "explaination": "Execute in shell to verify.",
      "mark": "2",
      "options1": "s.__len__()",
      "options2": "len(s)",
      "options3": "size(s)",
      "options4": "s.size()",
      "qsn": "To return the length of string s what command do we execute ?",
      "qsnNumber": "113"
    },
    {
      "correctAns": "4",
      "explaination": "Execute in shell to verify.",
      "mark": "2",
      "options1": "obj.__str__()",
      "options2": "str(obj)",
      "options3": "print obj",
      "options4": "All of the mentioned",
      "qsn": "If a class defines the __str__(self) method, for an object obj for the class, you can use which command to invoke the __str__ method.",
      "qsnNumber": "114"
    },
    {
      "correctAns": "1",
      "explaination": "s2 in s1 works in the same way as calling the special function __contains__ .",
      "mark": "2",
      "options1": "s1.__contains__(s2)",
      "options2": "s2 in s1",
      "options3": "s1.contains(s2)",
      "options4": "si.in(s2)",
      "qsn": "To check whether string s1 contains another string s2, use",
      "qsnNumber": "115"
    },
    {
      "correctAns": "2",
      "explaination": "Execute in shell to verify.",
      "mark": "2",
      "options1": "i.__add(j)",
      "options2": "i.__add__(j)",
      "options3": "i.__Add(j)",
      "options4": "i.__ADD(j)",
      "qsn": "Suppose i is 5 and j is 4, i + j is same as",
      "qsnNumber": "116"
    },
    {
      "correctAns": "1",
      "explaination": "Execute in shell to verify.",
      "mark": "2",
      "options1": "input(“Enter a string”)",
      "options2": "eval(input(“Enter a string”))",
      "options3": "enter(“Enter a string”)",
      "options4": "eval(enter(“Enter a string”))",
      "qsn": "What function do you use to read a string?",
      "qsnNumber": "117"
    },
    {
      "correctAns": "2",
      "explaination": "Execute in the shell to verify.",
      "mark": "2",
      "options1": "__345.355",
      "options2": "___345.355",
      "options3": "____345.355",
      "options4": "_____345.354",
      "qsn": "Suppose x is 345.3546, what is format(x, “10.3f”) (_ indicates space)",
      "qsnNumber": "118"
    },
    {
      "correctAns": "3",
      "explaination": "The first letter of the string is converted to uppercase and the others are converted to lowercase.",
      "mark": "2",
      "options1": "abc def",
      "options2": "ABC DEF",
      "options3": "Abc def",
      "options4": "Abc Def",
      "qsn": "What is the output of the statement: print('abc DEF'.capitalize())",
      "qsnNumber": "119"
    },
    {
      "correctAns": "3",
      "explaination": "The first letter of the string is converted to uppercase and the others are converted to lowercase.",
      "mark": "2",
      "options1": "abc. def",
      "options2": "ABC. DEF",
      "options3": "Abc. def",
      "options4": "Abc. Def",
      "qsn": "What is the output of the statement: print('abc. DEF'.capitalize())",
      "qsnNumber": "120"
    },
    {
      "correctAns": "3",
      "explaination": "The function center() takes at least one parameter.",
      "mark": "2",
      "options1": "cd",
      "options2": "abcdef",
      "options3": "error",
      "options4": "none of the mentioned",
      "qsn": "What is the output of the statement: print('abcdef'.center())",
      "qsnNumber": "121"
    },
    {
      "correctAns": "3",
      "explaination": "The entire string is printed when the argument passed to center() is less than the length of the string.",
      "mark": "2",
      "options1": "cd",
      "options2": "abcdef",
      "options3": "error",
      "options4": "none of the mentioned",
      "qsn": "What is the output of the statement: print('abcdef'.center(0))",
      "qsnNumber": "122"
    },
    {
      "correctAns": "2",
      "explaination": "Padding is done towards the left-hand-side first when the final string is of odd length. Extra spaces are present since we haven’t overridden the value of sep.",
      "mark": "2",
      "options1": "* abcdef *",
      "options2": "* abcdef *",
      "options3": "*abcdef *",
      "options4": "* abcdef*",
      "qsn": "What is the output of the statement: print('*', 'abcdef'.center(7), '*')",
      "qsnNumber": "123"
    },
    {
      "correctAns": "4",
      "explaination": "Padding is done towards the left-hand-side first when the final string is of odd length.",
      "mark": "2",
      "options1": "* abcdef *",
      "options2": "* abcdef *",
      "options3": "*abcdef *",
      "options4": "* abcdef*",
      "qsn": "What is the output of the statement: print('*', 'abcdef'.center(7), '*', sep='')",
      "qsnNumber": "124"
    },
    {
      "correctAns": "3",
      "explaination": "Padding is done towards the right-hand-side first when the final string is of even length.",
      "mark": "2",
      "options1": "* abcde *",
      "options2": "* abcde *",
      "options3": "*abcde *",
      "options4": "* abcde*",
      "qsn": "What is the output of the statement: print('*', 'abcde'.center(6), '*', sep='')",
      "qsnNumber": "125"
    },
    {
      "correctAns": "4",
      "explaination": "TypeError, the fill character must be a character, not an int.",
      "mark": "2",
      "options1": "1abcdef",
      "options2": "abcdef1",
      "options3": " abcdef",
      "options4": "error",
      "qsn": "What is the output of the statement: print('abcdef'.center(7, 1))",
      "qsnNumber": "126"
    },
    {
      "correctAns": "1",
      "explaination": "The character ‘1’ is used for padding instead of a space.",
      "mark": "2",
      "options1": "1abcdef",
      "options2": "abcdef1",
      "options3": " abcdef",
      "options4": "error",
      "qsn": "What is the output of the statement: print('abcdef'.center(7, '1'))",
      "qsnNumber": "127"
    },
    {
      "correctAns": "4",
      "explaination": "The fill character must be exactly one character long.",
      "mark": "2",
      "options1": "12abcdef12",
      "options2": "abcdef1212",
      "options3": "1212abcdef",
      "options4": "error",
      "qsn": "What is the output of the statement: print('abcdef'.center(10, '12'))",
      "qsnNumber": "128"
    },
    {
      "correctAns": "1",
      "explaination": "Counts the number of times the substring ‘yy’ is present in the given string.",
      "mark": "2",
      "options1": "2",
      "options2": "0",
      "options3": "error",
      "options4": "none of the mentioned",
      "qsn": "What is the output of the statement: print('xyyzxyzxzxyy'.count('yy'))",
      "qsnNumber": "129"
    },
    {
      "correctAns": "1",
      "explaination": "Counts the number of times the substring ‘yy’ is present in the given string, starting from position 1.",
      "mark": "2",
      "options1": "2",
      "options2": "0",
      "options3": "error",
      "options4": "none of the mentioned",
      "qsn": "What is the output of the statement: print('xyyzxyzxzxyy'.count('yy', 1))",
      "qsnNumber": "130"
    },
    {
      "correctAns": "3",
      "explaination": "Counts the number of times the substring ‘yy’ is present in the given string, starting from position 2.",
      "mark": "2",
      "options1": "2",
      "options2": "0",
      "options3": "1",
      "options4": "none of the mentioned",
      "qsn": "What is the output of the statement: print('xyyzxyzxzxyy'.count('yy', 2))",
      "qsnNumber": "131"
    },
    {
      "correctAns": "1",
      "explaination": "An error will not occur if the end value is greater than the length of the string itself.",
      "mark": "2",
      "options1": "2",
      "options2": "0",
      "options3": "1",
      "options4": "none of the mentioned",
      "qsn": "What is the output of the statement: print('xyyzxyzxzxyy'.count('xyy', 0, 100))",
      "qsnNumber": "132"
    },
    {
      "correctAns": "2",
      "explaination": "Counts the number of times the substring ‘xyy’ is present in the given string, starting from position 2 and ending at position 11.",
      "mark": "2",
      "options1": "2",
      "options2": "0",
      "options3": "1",
      "options4": "none of the mentioned",
      "qsn": "What is the output of the statement: print('xyyzxyzxzxyy'.count('xyy', 2, 11))",
      "qsnNumber": "133"
    },
    {
      "correctAns": "2",
      "explaination": "Counts the number of times the substring ‘xyy’ is present in the given string, starting from position 2 and ending at position 11.",
      "mark": "2",
      "options1": "2",
      "options2": "0",
      "options3": "1",
      "options4": "none of the mentioned",
      "qsn": "What is the output of the statement: print('xyyzxyzxzxyy'.count('xyy', -10, -1))",
      "qsnNumber": "134"
    },
    {
      "correctAns": "3",
      "explaination": "A bytes object is returned by encode.",
      "mark": "2",
      "options1": "abc",
      "options2": "‘abc’",
      "options3": "b’abc’",
      "options4": "h’abc’",
      "qsn": "What is the output of the statement: print('abc'.encode())",
      "qsnNumber": "135"
    },
    {
      "correctAns": "3",
      "explaination": "The default value of encoding is utf-8.",
      "mark": "2",
      "options1": "ascii",
      "options2": "qwerty",
      "options3": "utf-8",
      "options4": "utf-16",
      "qsn": "What is the default value of encoding in encode()?",
      "qsnNumber": "136"
    },
    {
      "correctAns": "2",
      "explaination": "The function returns True if the given string ends with the specified substring.",
      "mark": "2",
      "options1": "1",
      "options2": "True",
      "options3": "3",
      "options4": "2",
      "qsn": "What is the output of the statement: print('xyyzxyzxzxyy'.endswith('xyy'))",
      "qsnNumber": "137"
    },
    {
      "correctAns": "4",
      "explaination": "Final class cannot be inherited. This helps when we do not want classes to provide extension to these classes.",
      "mark": "2",
      "options1": "Final class cause compilation failure",
      "options2": "Final class cannot be instantiated",
      "options3": "Final class cause runtime failure",
      "options4": "Final class cannot be inherited",
      "qsn": "What is the output of the statement: print('xyyzxyzxzxyy'.endswith('xyy', 0, 2))",
      "qsnNumber": "138"
    },
    {
      "correctAns": "1",
      "explaination": "Only one copy of static variables is created when a class is loaded. Each object instantiated has its own copy of instance variables.",
      "mark": "2",
      "options1": "1, 10",
      "options2": "10, 10",
      "options3": "10, 1",
      "options4": "1, 1",
      "qsn": "How many copies of static and class variables are created when 10 objects are created of a class?",
      "qsnNumber": "139"
    },
    {
      "correctAns": "4",
      "explaination": "Default is the access modifier when none is defined explicitly. It means the member (method or variable) can be accessed within the same package.",
      "mark": "2",
      "options1": "protected",
      "options2": "private",
      "options3": "public",
      "options4": "default",
      "qsn": "Which is the modifier when there is none mentioned explicitly?",
      "qsnNumber": "140"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "class",
      "options2": "object",
      "options3": "variable",
      "options4": "none of the mentioned",
      "qsn": "Arrays in Java are implemented as?",
      "qsnNumber": "141"
    },
    {
      "correctAns": "1",
      "explaination": "A variable can be declared final, doing so prevents its content from being modified. Final variables must be initialized when it is declared.",
      "mark": "2",
      "options1": "final",
      "options2": "last",
      "options3": "constant",
      "options4": "static",
      "qsn": "Which of these keywords is used to prevent content of a variable from being modified?",
      "qsnNumber": "142"
    },
    {
      "correctAns": "2",
      "explaination": "static statements are run as soon as class containing then is loaded, prior to any object declaration.",
      "mark": "2",
      "options1": "class",
      "options2": "object",
      "options3": "variable",
      "options4": "method",
      "qsn": "Which of these cannot be declared static?",
      "qsnNumber": "143"
    },
    {
      "correctAns": "4",
      "explaination": "All objects of class share same static variable, when object of a class are declared, all the objects share same copy of static members, no copy of static variables are made.",
      "mark": "2",
      "options1": "static methods can call other static methods only",
      "options2": "static methods must only access static data",
      "options3": "static methods can not refer to this or super in any way",
      "options4": "when object of class is declared, each object contains its own copy of static variables",
      "qsn": "Which of the following statements are incorrect?",
      "qsnNumber": "144"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "Variables declared as final occupy memory",
      "options2": "final variable must be initialized at the time of declaration",
      "options3": "Arrays in java are implemented as an object",
      "options4": "All arrays contain an attribute-length which contains the number of elements stored in the array",
      "qsn": "Which of the following statements are incorrect?",
      "qsnNumber": "145"
    },
    {
      "correctAns": "1",
      "explaination": "main() method must be declared static, main() method is called by Java runtime system before any object of any class exists.",
      "mark": "2",
      "options1": "main()",
      "options2": "delete()",
      "options3": "run()",
      "options4": "finalize()",
      "qsn": "Which of these methods must be made static?",
      "qsnNumber": "146"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "class",
      "options2": "object",
      "options3": "variable",
      "options4": "character array",
      "qsn": "String in Java is a?",
      "qsnNumber": "147"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "char()",
      "options2": "Charat()",
      "options3": "charat()",
      "options4": "charAt()",
      "qsn": "Which of these method of String class is used to obtain character at specified index?",
      "qsnNumber": "148"
    },
    {
      "correctAns": "2",
      "explaination": "Whenever a subclass needs to refer to its immediate superclass, it can do so by use of the keyword super.",
      "mark": "2",
      "options1": "upper",
      "options2": "super",
      "options3": "this",
      "options4": "none of the mentioned",
      "qsn": "Which of these keywords is used to refer to member of base class from a subclass?",
      "qsnNumber": "149"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "isequal()",
      "options2": "isequals()",
      "options3": "equal()",
      "options4": "equals()",
      "qsn": "Which of these method of String class can be used to test to strings for equality?",
      "qsnNumber": "151"
    },
    {
      "correctAns": "2",
      "explaination": "Strings in Java are immutable that is they can not be modified.",
      "mark": "2",
      "options1": "String is a class",
      "options2": "Strings in java are mutable",
      "options3": "Every string is an object of class String",
      "options4": "Java defines a peer class of String, called StringBuffer, which allows string to be altered",
      "qsn": "Which of the following statements are incorrect?",
      "qsnNumber": "152"
    },
    {
      "correctAns": "3",
      "explaination": "If a static method is present in the program then it will be executed first, then main will be executed.",
      "mark": "2",
      "options1": "main method",
      "options2": "finalize method",
      "options3": "static method",
      "options4": "private method",
      "qsn": "Which of these is the method which is executed first before execution of any other thing takes place in a program?",
      "qsnNumber": "153"
    },
    {
      "correctAns": "2",
      "explaination": "Function overloading is a process of defining more than one method in a class with same name differentiated by function signature i:e return type or parameters type and number. Example – int volume(int length, int width) & int volume(int length , int width , int height) can be used to calculate volume.",
      "mark": "2",
      "options1": "Function overriding",
      "options2": "Function overloading",
      "options3": "Function doubling",
      "options4": "None of the mentioned",
      "qsn": "What is the process of defining more than one method in a class differentiated by parameters?",
      "qsnNumber": "154"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "Parameters data type",
      "options2": "Number of parameters",
      "options3": "Return type of method",
      "options4": "All of the mentioned",
      "qsn": "Which of these can be used to differentiate two or more methods having same name?",
      "qsnNumber": "155"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "void",
      "options2": "int",
      "options3": "float",
      "options4": "both int and float",
      "qsn": "Which of these data type can be used for a method having a return statement in it?",
      "qsnNumber": "156"
    },
    {
      "correctAns": "4",
      "explaination": "Even if a method is returning a value, it is not necessary to store that value.",
      "mark": "2",
      "options1": "Two or more methods with same name can be differentiated on the basis of their parameters data type",
      "options2": "Two or more method having same name can be differentiated on basis of number of parameters",
      "options3": "Any already defined method in java library can be defined again in the program with different data type of parameters",
      "options4": "If a method is returning a value the calling statement must have a variable to store that value",
      "qsn": "Which of these statement is incorrect?",
      "qsnNumber": "157"
    },
    {
      "correctAns": "1",
      "explaination": "Only main() method can be given parameters via using command line arguments.",
      "mark": "2",
      "options1": "main()",
      "options2": "recursive() method",
      "options3": "Any method",
      "options4": "System defined methods",
      "qsn": "Which of these method is given parameter via command line arguments?",
      "qsnNumber": "158"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "Array",
      "options2": "Stack",
      "options3": "String",
      "options4": "Integer",
      "qsn": "Which of these data types is used to store command line arguments?",
      "qsnNumber": "159"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "Infinite",
      "options2": "Only 1",
      "options3": "System Dependent",
      "options4": "None of the mentioned",
      "qsn": "How many arguments can be passed to main()?",
      "qsnNumber": "160"
    },
    {
      "correctAns": "3",
      "explaination": "args in an array of String.",
      "mark": "2",
      "options1": "args is a String",
      "options2": "args is a Character",
      "options3": "args is an array of String",
      "options4": "args in an array of Character",
      "qsn": "Which of these is a correct statement about args in "public static void main(String args[])"?",
      "qsnNumber": "161"
    },
    {
      "correctAns": "2",
      "explaination": "All command Line arguments are passed as a string. We must convert numerical value to their internal forms manually.",
      "mark": "2",
      "options1": "Yes",
      "options2": "No",
      "options3": "Compiler Dependent",
      "options4": "Only ASCII characters can be converted",
      "qsn": "Can command line arguments be converted into int automatically if required?",
      "qsnNumber": "162"
    },
    {
      "correctAns": "1",
      "explaination": "Arguments tab is used to pass command line argument in eclipse.",
      "mark": "2",
      "options1": "Arguments tab",
      "options2": "Variable tab",
      "options3": "Cannot pass command line argument in eclipse",
      "options4": "Environment variable tab",
      "qsn": "How do we pass command line argument in Eclipse?",
      "qsnNumber": "163"
    },
    {
      "correctAns": "2",
      "explaination": "JCommander is a very small Java framework that makes it trivial to parse command line parameters.",
      "mark": "2",
      "options1": "Args",
      "options2": "JCommander",
      "options3": "Command Line",
      "options4": "Input",
      "qsn": "Which class allows parsing of command line arguments?",
      "qsnNumber": "164"
    },
    {
      "correctAns": "4",
      "explaination": "@Parameter, @Parameter(names = { “-log”, “-verbose” }, description = “Level of verbosity”), etc are various forms of using @Parameter",
      "mark": "2",
      "options1": "@Input",
      "options2": "@Variable",
      "options3": "@Command Line",
      "options4": "@Parameter",
      "qsn": "Which annotation is used to represent command line input and assigned to correct data type?",
      "qsnNumber": "165"
    },
    {
      "correctAns": "2",
      "explaination": "JCommander supports the @syntax, which allows us to put all our options into a file",
      "mark": "2",
      "options1": "Allows multiple parameters to be passed",
      "options2": "Allows one to put all your options into a file and pass this file as parameter",
      "options3": "Allows one to pass only one parameter",
      "options4": "Allows one to pass one file containing only one parameter",
      "qsn": "What is the use of @syntax?",
      "qsnNumber": "166"
    },
    {
      "correctAns": "2",
      "explaination": "Recursion is the process of defining something in terms of itself. It allows us to define method that calls itself.",
      "mark": "2",
      "options1": "Recursion is a class",
      "options2": "Recursion is a process of defining a method that calls other methods repeatedly",
      "options3": "Recursion is a process of defining a method that calls itself repeatedly",
      "options4": "Recursion is a process of defining a method that calls other methods which in turn call again this method",
      "qsn": "What is Recursion in Java?",
      "qsnNumber": "167"
    },
    {
      "correctAns": "2",
      "explaination": "Recursions are always managed by using stack.",
      "mark": "2",
      "options1": "Array",
      "options2": "Stack",
      "options3": "Queue",
      "options4": "Tree",
      "qsn": "Which of these data types is used by operating system to manage the Recursion in Java?",
      "qsnNumber": "168"
    },
    {
      "correctAns": "1",
      "explaination": "If a recursive method does not have a base case then an infinite loop occurs which results in Stack Overflow.",
      "mark": "2",
      "options1": "An infinite loop occurs",
      "options2": "System stops the program after some time",
      "options3": "After 1000000 calls it will be automatically stopped",
      "options4": "None of the mentioned",
      "qsn": "Which of these will happen if recursive method does not have a base case?",
      "qsnNumber": "169"
    },
    {
      "correctAns": "4",
      "explaination": "Recursion is always managed by operating system.",
      "mark": "2",
      "options1": "A recursive method must have a base case",
      "options2": "Recursion always uses stack",
      "options3": "Recursive methods are faster that programmers written loop to call the function repeatedly using a stack",
      "options4": "Recursion is managed by Java Runtime environment",
      "qsn": "Which of these is not a correct statement?",
      "qsnNumber": "170"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "java.lang",
      "options2": "java.util",
      "options3": "java.io",
      "options4": "java.system",
      "qsn": "Which of these packages contains the exception Stack Overflow in Java?",
      "qsnNumber": "171"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "super",
      "options2": "this",
      "options3": "extent",
      "options4": "extends",
      "qsn": "Which of these keyword can be used in subclass to call the constructor of superclass?",
      "qsnNumber": "172"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "Method overloading",
      "options2": "Method overriding",
      "options3": "Method hiding",
      "options4": "None of the mentioned",
      "qsn": "What is the process of defining a method in subclass having same name & type signature as a method in its superclass?",
      "qsnNumber": "173"
    },
    {
      "correctAns": "4",
      "explaination": "To disallow a method from being overridden, specify final as a modifier at the start of its declaration. Methods declared as final cannot be overridden.",
      "mark": "2",
      "options1": "static",
      "options2": "constant",
      "options3": "protected",
      "options4": "final",
      "qsn": "Which of these keywords can be used to prevent Method overriding?",
      "qsnNumber": "174"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "super(void);",
      "options2": "superclass.();",
      "options3": "super.A();",
      "options4": "super();",
      "qsn": "Which of these is correct way of calling a constructor having no parameters, of superclass A by subclass B?",
      "qsnNumber": "175"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "Abstraction",
      "options2": "Encapsulation",
      "options3": "Polymorphism",
      "options4": "None of the mentioned",
      "qsn": "Which of these is supported by method overriding in Java?",
      "qsnNumber": "176"
    },
    {
      "correctAns": "2",
      "explaination": "Object class is superclass of every class in Java.",
      "mark": "2",
      "options1": "String class",
      "options2": "Object class",
      "options3": "Abstract class",
      "options4": "ArrayList class",
      "qsn": "Which of these class is superclass of every class in Java?",
      "qsnNumber": "177"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "Objectcopy()",
      "options2": "copy()",
      "options3": "Object clone()",
      "options4": "clone()",
      "qsn": "Which of these method of Object class can clone an object?",
      "qsnNumber": "178"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "get()",
      "options2": "void getclass()",
      "options3": "Class getclass()",
      "options4": "None of the mentioned",
      "qsn": "Which of these method of Object class is used to obtain class of an object at run time?",
      "qsnNumber": "179"
    },
    {
      "correctAns": "4",
      "explaination": "Declaring a class final implicitly declared all of its methods final, and makes the class inheritable.",
      "mark": "2",
      "options1": "super",
      "options2": "constant",
      "options3": "class",
      "options4": "final",
      "qsn": "Which of these keywords can be used to prevent inheritance of a class?",
      "qsnNumber": "180"
    },
    {
      "correctAns": "1",
      "explaination": "A abstract class is incomplete by itself and relies upon its subclasses to provide complete implementation. If we declare a class final then no class can inherit that class, an abstract class needs its subclasses hence both final and abstract cannot be used for a same class.",
      "mark": "2",
      "options1": "abstract",
      "options2": "extends",
      "options3": "abstract and extends",
      "options4": "none of the mentioned",
      "qsn": "Which of these keywords cannot be used for a class which has been declared final?",
      "qsnNumber": "181"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "Object class",
      "options2": "abstract class",
      "options3": "ArrayList class",
      "options4": "None of the mentioned",
      "qsn": "Which of these class relies upon its subclasses for complete implementation of its methods?",
      "qsnNumber": "182"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "abst",
      "options2": "abstract",
      "options3": "Abstract",
      "options4": "abstract class",
      "qsn": "Which of these keywords are used to define an abstract class?",
      "qsnNumber": "183"
    },
    {
      "correctAns": "1",
      "explaination": "Thread is not an abstract class.",
      "mark": "2",
      "options1": "Thread",
      "options2": "AbstractList",
      "options3": "List",
      "options4": "None of the Mentioned",
      "qsn": "Which of these is not abstract?",
      "qsnNumber": "184"
    },
    {
      "correctAns": "1",
      "explaination": "Any subclass of an abstract class must either implement all of the abstract method in the superclass or be itself declared abstract.",
      "mark": "2",
      "options1": "Abstract",
      "options2": "A simple class",
      "options3": "Static class",
      "options4": "None of the mentioned",
      "qsn": "If a class inheriting an abstract class does not define all of its function then it will be known as?",
      "qsnNumber": "185"
    },
    {
      "correctAns": "3",
      "explaination": "Abstract class cannot be directly initiated with new operator, Since abstract class does not contain any definition of implementation it is not possible to create an abstract object.",
      "mark": "2",
      "options1": "Every class containing abstract method must be declared abstract",
      "options2": "Abstract class defines only the structure of the class not its implementation",
      "options3": "Abstract class can be initiated by new operator",
      "options4": "Abstract class can be inherited",
      "qsn": "Which of these is not a correct statement?",
      "qsnNumber": "186"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "java.lang",
      "options2": "java.util",
      "options3": "java.io",
      "options4": "java.system",
      "qsn": "Which of these packages contains abstract keyword?",
      "qsnNumber": "187"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "super",
      "options2": "this",
      "options3": "extent",
      "options4": "extends",
      "qsn": "Which of these keyword must be used to inherit a class?",
      "qsnNumber": "188"
    },
    {
      "correctAns": "2",
      "explaination": "Whenever a subclass needs to refer to its immediate superclass, it can do so by use of the keyword super.",
      "mark": "2",
      "options1": "upper",
      "options2": "super",
      "options3": "this",
      "options4": "none of the mentioned",
      "qsn": "Which of these keywords is used to refer to member of base class from a subclass?",
      "qsnNumber": "189"
    },
    {
      "correctAns": "2",
      "explaination": "A class member declared protected becomes private member of subclass.",
      "mark": "2",
      "options1": "public member",
      "options2": "private member",
      "options3": "protected member",
      "options4": "static member",
      "qsn": "A class member declared protected becomes member of subclass of which type?",
      "qsnNumber": "190"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "class B + class A {}",
      "options2": "class B inherits class A {}",
      "options3": "class B extends A {}",
      "options4": "class B extends class A {}",
      "qsn": "Which of these is correct way of inheriting class A by class B?",
      "qsnNumber": "191"
    },
    {
      "correctAns": "2",
      "explaination": "Inheritance is way of acquiring attributes and methods of parent class. Java supports hierarchical inheritance directly.",
      "mark": "2",
      "options1": "Single inheritance",
      "options2": "Single inheritance",
      "options3": "Hierarchical inheritance",
      "options4": "Multiple inheritance",
      "qsn": "What is not type of inheritance?",
      "qsnNumber": "193"
    },
    {
      "correctAns": "1",
      "explaination": "Multiple inheritance in java is implemented using interfaces. Multiple interfaces can be implemented by a class.",
      "mark": "2",
      "options1": "Interfaces",
      "options2": "Multithreading",
      "options3": "Protected methods",
      "options4": "Private methods",
      "qsn": "Using which of the following, multiple inheritance in Java can be implemented?",
      "qsnNumber": "194"
    },
    {
      "correctAns": "4",
      "explaination": "All classes in java are inherited from Object class. Interfaces are not inherited from Object Class.",
      "mark": "2",
      "options1": "java.lang.class",
      "options2": "java.class.inherited",
      "options3": "java.class.object",
      "options4": "java.lang.Object",
      "qsn": "All classes in Java are inherited from which class?",
      "qsnNumber": "195"
    },
    {
      "correctAns": "2",
      "explaination": "By declaring variable private, the variable will not be available in inherited to subclass.",
      "mark": "2",
      "options1": "Protected",
      "options2": "Private",
      "options3": "Public",
      "options4": "Static",
      "qsn": "In order to restrict a variable of a class from inheriting to subclass, how variable should be declared?",
      "qsnNumber": "196"
    },
    {
      "correctAns": "1",
      "explaination": "Super keyword is used to access hidden super class variable in subclass.",
      "mark": "2",
      "options1": "super",
      "options2": "this",
      "options3": "upper",
      "options4": "classname",
      "qsn": "If super class and subclass have same variable name, which keyword should be used to use super class?",
      "qsnNumber": "197"
    },
    {
      "correctAns": "4",
      "explaination": "Interface is implemented using implements keyword. A concrete class must implement all the methods of an interface, else it must be declared abstract.",
      "mark": "2",
      "options1": "inherited",
      "options2": "using",
      "options3": "extends",
      "options4": "implements",
      "qsn": "Which of the following is used for implementing inheritance through interface?",
      "qsnNumber": "198"
    },
    {
      "correctAns": "4",
      "explaination": "Interface is implemented using implements keyword. A concrete class must implement all the methods of an interface, else it must be declared abstract.",
      "mark": "2",
      "options1": "inherited",
      "options2": "using",
      "options3": "extends",
      "options4": "implements",
      "qsn": "Which of the following is used for implementing inheritance through class?",
      "qsnNumber": "199"
    },
    {
      "correctAns": "3",
      "explaination": "Class can be extended using extends keyword. One class can extend only one class. A final class cannot be extended.",
      "mark": "2",
      "options1": "inherited",
      "options2": "using",
      "options3": "extends",
      "options4": "implements",
      "qsn": "Which of the following is used for implementing inheritance through class?",
      "qsnNumber": "200"
    },
    {
      "correctAns": "2",
      "explaination": "In case of such conflict, compiler will not be able to link a method call due to ambiguity. It will throw compile time error.",
      "mark": "2",
      "options1": "Runtime error",
      "options2": "Compile time error",
      "options3": "Code runs successfully",
      "options4": "First called method is executed successfully",
      "qsn": "What would be the result if class extends two interfaces and both have method with same name and signature?",
      "qsnNumber": "201"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "java.util",
      "options2": "java.lang",
      "options3": "ArrayList",
      "options4": "None of the mentioned",
      "qsn": "Which of these class is superclass of String and StringBuffer class?",
      "qsnNumber": "202"
    },
    {
      "correctAns": "1",
      "explaination": "Operator + is used to concatenate strings, Example String s = “i ” + “like ” + “java”; String s contains “I like java”.",
      "mark": "2",
      "options1": "+",
      "options2": "+=",
      "options3": "&",
      "options4": "||",
      "qsn": "Which of these operators can be used to concatenate two or more String objects?",
      "qsnNumber": "203"
    },
    {
      "correctAns": "4",
      "explaination": "Method length() of string class is used to get the length of the object which invoked method length().",
      "mark": "2",
      "options1": "get()",
      "options2": "Sizeof()",
      "options3": "lengthof()",
      "options4": "length()",
      "qsn": "Which of these method of class String is used to obtain length of String object?",
      "qsnNumber": "204"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "CHARAT()",
      "options2": "chatat()",
      "options3": "charAt()",
      "options4": "ChatAt()",
      "qsn": "Which of these method of class String is used to extract a single character from a String object?",
      "qsnNumber": "205"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "String()",
      "options2": "String(void)",
      "options3": "String(0)",
      "options4": "None of the mentioned",
      "qsn": "Which of these constructors is used to create an empty String object?",
      "qsnNumber": "206"
    },
    {
      "correctAns": "3",
      "explaination": "StringBuffer class is used to create strings that can be modified after they are created.",
      "mark": "2",
      "options1": "String objects are immutable, they cannot be changed",
      "options2": "String object can point to some other reference of String variable",
      "options3": "StringBuffer class is used to store string in a buffer for later use",
      "options4": "None of the mentioned",
      "qsn": "Which of these is an incorrect statement?",
      "qsnNumber": "207"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "getchars()",
      "options2": "GetChars()",
      "options3": "Getchars()",
      "options4": "getChars()",
      "qsn": "Which of these method of class String is used to extract more than one character at a time a String object?",
      "qsnNumber": "208"
    },
    {
      "correctAns": "1",
      "explaination": "getBytes() stores the character in an array of bytes. It uses default character to byte conversions provided by platform.",
      "mark": "2",
      "options1": "getBytes()",
      "options2": "GetByte()",
      "options3": "giveByte()",
      "options4": "Give Bytes()",
      "qsn": "Which of these methods is an alternative to getChars() that stores the characters in an array of bytes?",
      "qsnNumber": "209"
    },
    {
      "correctAns": "3",
      "explaination": "charAt() return one character only not array of character.",
      "mark": "2",
      "options1": "charAt()",
      "options2": "both getChars() & charAt()",
      "options3": "both toCharArray() & getChars()",
      "options4": "all of the mentioned",
      "qsn": "Which of these methods can be used to convert all characters in a String into a character array?",
      "qsnNumber": "210"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "equals()",
      "options2": "Equals()",
      "options3": "isequal()",
      "options4": "Isequal()",
      "qsn": "Which of these method of class String is used to compare two String objects for their equality?",
      "qsnNumber": "211"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "regionMatch()",
      "options2": "match()",
      "options3": "RegionMatches()",
      "options4": "regionMatches()",
      "qsn": "Which of these methods is used to compare a specific region inside a string with another specific region in another string?",
      "qsnNumber": "213"
    },
    {
      "correctAns": "1",
      "explaination": "Method startsWith() of string class is used to check whether the String in question starts with a specified string. It is specialized form of method regionMatches().",
      "mark": "2",
      "options1": "startsWith()",
      "options2": "endsWith()",
      "options3": "Starts()",
      "options4": "ends()",
      "qsn": "Which of these method of class String is used to check whether a given object starts with a particular string literal?",
      "qsnNumber": "214"
    },
    {
      "correctAns": "1",
      "explaination": "compareTo() function returns zero when both the strings are equal, it returns a value less than zero if the invoking string is less than the other string being compared and value greater than zero when invoking string is greater than the string compared to.",
      "mark": "2",
      "options1": "zero",
      "options2": "value less than zero",
      "options3": "value greater than zero",
      "options4": "none of the mentioned",
      "qsn": "What is the value returned by function compareTo() if the invoking string is less than the string compared?",
      "qsnNumber": "215"
    },
    {
      "correctAns": "3",
      "explaination": "equals() method of string class returns boolean value true if both the string are equal and false if they are unequal.",
      "mark": "2",
      "options1": "char",
      "options2": "int",
      "options3": "boolean",
      "options4": "all of the mentioned",
      "qsn": "Which of these data type value is returned by equals() method of String class?",
      "qsnNumber": "216"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "substring()",
      "options2": "Substring()",
      "options3": "SubString()",
      "options4": "None of the mentioned",
      "qsn": "Which of these method of class String is used to extract a substring from a String object?",
      "qsnNumber": "217"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "startsWith()",
      "options2": "trim()",
      "options3": "Trim()",
      "options4": "doTrim()",
      "qsn": "Which of these method of class String is used to remove leading and trailing whitespaces?",
      "qsnNumber": "218"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "zero",
      "options2": "value less than zero",
      "options3": "value greater than zero",
      "options4": "none of the mentioned",
      "qsn": "What is the value returned by function compareTo() if the invoking string is greater than the string compared?",
      "qsnNumber": "219"
    },
    {
      "correctAns": "1",
      "explaination": "replace() method replaces all occurrences of one character in invoking string with another character.",
      "mark": "2",
      "options1": "replace() method replaces all occurrences of one character in invoking string with another character",
      "options2": "replace() method replaces only first occurrences of a character in invoking string with another character",
      "options3": "replace() method replaces all the characters in invoking string with another character",
      "options4": "replace() replace() method replaces last occurrence of a character in invoking string with another character",
      "qsn": "Which of the following statement is correct?",
      "qsnNumber": "220"
    },
    {
      "correctAns": "2",
      "explaination": "StringBuffer represents growable and writable character sequence.",
      "mark": "2",
      "options1": "String()",
      "options2": "StringBuffer()",
      "options3": "Both of the mentioned",
      "options4": "None of the mentioned",
      "qsn": "Which of these class is used to create an object whose character sequence is mutable?",
      "qsnNumber": "221"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "concat()",
      "options2": "append()",
      "options3": "join()",
      "options4": "concatenate()",
      "qsn": "Which of these method of class StringBuffer is used to concatenate the string representation to the end of invoking string?",
      "qsnNumber": "222"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "length()",
      "options2": "Length()",
      "options3": "capacity()",
      "options4": "Capacity()",
      "qsn": "Which of these method of class StringBuffer is used to find the length of current character sequence?",
      "qsnNumber": "223"
    },
    {
      "correctAns": "1",
      "explaination": "reverse() method reverses all characters. It returns the reversed object on which it was called.",
      "mark": "2",
      "options1": "reverse() method reverses all characters",
      "options2": "reverseall() method reverses all characters",
      "options3": "replace() method replaces first occurrence of a character in invoking string with another character",
      "options4": "replace() method replaces last occurrence of a character in invoking string with another character",
      "qsn": "Which of the following statement is correct?",
      "qsnNumber": "224"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "substring()",
      "options2": "Substring()",
      "options3": "SubString()",
      "options4": "None of the mentioned",
      "qsn": "Which of these method of class StringBuffer is used to extract a substring from a String object?",
      "qsnNumber": "225"
    },
    {
      "correctAns": "1",
      "explaination": "reverse() method reverses all characters. It returns the reversed object on which it was called.",
      "mark": "2",
      "options1": "reverse()",
      "options2": "reverseall()",
      "options3": "Reverse()",
      "options4": "reverseAll()",
      "qsn": "Which of these method of class StringBuffer is used to reverse sequence of characters?",
      "qsnNumber": "226"
    },
    {
      "correctAns": "1",
      "explaination": "length()- returns the length of String the StringBuffer would create whereas capacity() returns total number of characters that can be supported before it is grown.",
      "mark": "2",
      "options1": "length()",
      "options2": "capacity()",
      "options3": "Length()",
      "options4": "Capacity()",
      "qsn": "Which of these method of class StringBuffer is used to get the length of sequence of characters?",
      "qsnNumber": "227"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "StringBuffer()",
      "options2": "StringBuffer(int size)",
      "options3": "StringBuffer(String str)",
      "options4": "StringBuffer(int size , String str)",
      "qsn": "Which of the following are incorrect form of StringBuffer class constructor?",
      "qsnNumber": "228"
    },
    {
      "correctAns": "3",
      "explaination": "Array class is a member of java.util.",
      "mark": "2",
      "options1": "Byte",
      "options2": "Integer",
      "options3": "Array",
      "options4": "Class",
      "qsn": "Which of these classes is not included in java.lang?",
      "qsnNumber": "229"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "type wrapping",
      "options2": "type conversion",
      "options3": "type casting",
      "options4": "none of the Mentioned.",
      "qsn": "Which of these is a process of converting a simple data type into a class?",
      "qsnNumber": "230"
    },
    {
      "correctAns": "4",
      "explaination": "Number is an abstract class containing subclasses Double, Float, Byte, Short, Integer and Long.",
      "mark": "2",
      "options1": "Long",
      "options2": "Digits",
      "options3": "Float",
      "options4": "Number",
      "qsn": "Which of these is a super class of wrappers Double & Integer?",
      "qsnNumber": "231"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "float",
      "options2": "double",
      "options3": "Float",
      "options4": "Double",
      "qsn": "Which of these is wrapper for simple data type float?",
      "qsnNumber": "232"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "bytevalue()",
      "options2": "byte byteValue()",
      "options3": "Bytevalue()",
      "options4": "Byte Bytevalue().",
      "qsn": "Which of the following is method of wrapper Float for converting the value of an object into byte?",
      "qsnNumber": "233"
    },
    {
      "correctAns": "1",
      "explaination": "isinfinite() method returns true is the value being tested is infinitely large or small in magnitude.",
      "mark": "2",
      "options1": "isInfinite()",
      "options2": "isNaN()",
      "options3": "Isinfinite()",
      "options4": "IsNaN()",
      "qsn": "Which of these methods is used to check for infinitely large and small values?",
      "qsnNumber": "234"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "lang",
      "options2": "java",
      "options3": "util",
      "options4": "java.packages",
      "qsn": "Which of the following package stores all the simple data types in java?",
      "qsnNumber": "235"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "Integer",
      "options2": "Long",
      "options3": "Byte",
      "options4": "Double",
      "qsn": "Which of these is a wrapper for data type int?",
      "qsnNumber": "236"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "int hash()",
      "options2": "int hashcode()",
      "options3": "int hashCode()",
      "options4": "Integer hashcode()",
      "qsn": "Which of the following methods is a method of wrapper Integer for obtaining hash code for the invoking object?",
      "qsnNumber": "237"
    },
    {
      "correctAns": "4",
      "explaination": "Number is an abstract class containing subclasses Double, Float, Byte, Short, Integer and Long.",
      "mark": "2",
      "options1": "Long",
      "options2": "Digits",
      "options3": "Float",
      "options4": "Number",
      "qsn": "Which of these is a super class of wrappers Long, Character & Integer?",
      "qsnNumber": "238"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "Float",
      "options2": "Character",
      "options3": "String",
      "options4": "Integer",
      "qsn": "Which of these is wrapper for simple data type char?",
      "qsnNumber": "239"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "bytevalue()",
      "options2": "int intValue();",
      "options3": "Bytevalue()",
      "options4": "Byte Bytevalue()",
      "qsn": "Which of the following is method of wrapper Integer for converting the value of an object into int?",
      "qsnNumber": "240"
    },
    {
      "correctAns": "2",
      "explaination": "long longValue() is used to obtain value of invoking object as a long.",
      "mark": "2",
      "options1": "long value()",
      "options2": "long longValue()",
      "options3": "Long longvalue()",
      "options4": "Long Longvalue()",
      "qsn": "Which of these methods is used to obtain value of invoking object as a long?",
      "qsnNumber": "241"
    },
    {
      "correctAns": "1",
      "explaination": "The Void class has one field, TYPE, which holds a reference to the Class object for the type void.",
      "mark": "2",
      "options1": "Void",
      "options2": "Process",
      "options3": "System",
      "options4": "Runtime",
      "qsn": "Which of these class have only one field ‘TYPE’?",
      "qsnNumber": "242"
    },
    {
      "correctAns": "2",
      "explaination": "Kills the subprocess. The subprocess represented by this Process object is forcibly terminated.",
      "mark": "2",
      "options1": "void kill()",
      "options2": "void destroy()",
      "options3": "void terminate()",
      "options4": "void exit()",
      "qsn": "Which of the following method of Process class can terminate a process?",
      "qsnNumber": "243"
    },
    {
      "correctAns": "4",
      "explaination": "Standard output variable ‘out’ is defined in System class. out is usually used in print statement i:e System.out.print().",
      "mark": "2",
      "options1": "Void",
      "options2": "Process",
      "options3": "Runtime",
      "options4": "System",
      "qsn": "Standard output variable ‘out’ is defined in which class?",
      "qsnNumber": "244"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "Void",
      "options2": "Process",
      "options3": "Runtime",
      "options4": "System",
      "qsn": "Which of these class can encapsulate an entire executing program?",
      "qsnNumber": "245"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "currenttime()",
      "options2": "currentTime()",
      "options3": "currentTimeMillis()",
      "options4": "currenttimeMillis()",
      "qsn": "Which of the following is method of System class is used to find how long a program takes to execute?",
      "qsnNumber": "246"
    },
    {
      "correctAns": "4",
      "explaination": "System class holds a collection of static methods and variables. The standard input, output and error output of java runtime are stored in the in, out and err variables of System class.",
      "mark": "2",
      "options1": "Void",
      "options2": "Process",
      "options3": "Runtime",
      "options4": "System",
      "qsn": "Which of these class holds a collection of static methods and variables?",
      "qsnNumber": "247"
    },
    {
      "correctAns": "4",
      "explaination": "The object class class is superclass of all other classes.",
      "mark": "2",
      "options1": "Math",
      "options2": "Process",
      "options3": "System",
      "options4": "Object",
      "qsn": "Which of these class is superclass of all other classes?",
      "qsnNumber": "248"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "clone()",
      "options2": "copy()",
      "options3": "duplicate()",
      "options4": "dito()",
      "qsn": "Which of these method of Object class can generate duplicate copy of the object on which it is called?",
      "qsnNumber": "249"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "approximately 3",
      "options2": "approximately 3.14",
      "options3": "approximately 2.72",
      "options4": "approximately 0",
      "qsn": "What is the value of double consonant ‘E’ defined in Math class?",
      "qsnNumber": "250"
    },
    {
      "correctAns": "4",
      "explaination": "max(), min() and abs() are all rounding functions.",
      "mark": "2",
      "options1": "max()",
      "options2": "min()",
      "options3": "abs()",
      "options4": "all of the mentioned",
      "qsn": "Which of these method is a rounding function of Math class?",
      "qsnNumber": "251"
    },
    {
      "correctAns": "1",
      "explaination": "Math class contains all the floating point functions that are used for geometry, trigonometry, as well as several general purpose methods. Example : sin(), cos(), exp(), sqrt() etc.",
      "mark": "2",
      "options1": "Math",
      "options2": "Process",
      "options3": "System",
      "options4": "Object",
      "qsn": "Which of these class contains only floating point functions?",
      "qsnNumber": "252"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "Class",
      "options2": "Object",
      "options3": "Runtime",
      "options4": "System",
      "qsn": "Which of these class encapsulate the run time state of an object or an interface?",
      "qsnNumber": "253"
    },
    {
      "correctAns": "3",
      "explaination": "System class methods throw SecurityException.",
      "mark": "2",
      "options1": "IOException",
      "options2": "SystemException",
      "options3": "SecurityException",
      "options4": "InputOutputException",
      "qsn": "Which of these exceptions is thrown by methods of System class?",
      "qsnNumber": "254"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "gc()",
      "options2": "garbage()",
      "options3": "garbagecollection()",
      "options4": "Systemgarbagecollection()",
      "qsn": "Which of these methods initiates garbage collection?",
      "qsnNumber": "255"
    },
    {
      "correctAns": "1",
      "explaination": "load() methods loads the dynamic library whose name is specified.",
      "mark": "2",
      "options1": "load()",
      "options2": "library()",
      "options3": "loadlib()",
      "options4": "loadlibrary()",
      "qsn": "Which of these methods loads the specified dynamic library?",
      "qsnNumber": "256"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "setStream()",
      "options2": "setosteam()",
      "options3": "setOut()",
      "options4": "streamtoOstream()",
      "qsn": "Which of these method can set the out stream to OutputStream?",
      "qsnNumber": "257"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "0",
      "options2": "1",
      "options3": "2",
      "options4": "3",
      "qsn": "Which of these values are returns under the case of normal termination of a program?",
      "qsnNumber": "258"
    },
    {
      "correctAns": "4",
      "explaination": "Number is an abstract class containing subclasses Double, Float, Byte, Short, Integer and Long.",
      "mark": "2",
      "options1": "Long",
      "options2": "Digits",
      "options3": "Float",
      "options4": "Number",
      "qsn": "Which of these is a super class of wrappers Double and Float?",
      "qsnNumber": "259"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "doubleValue()",
      "options2": "converDouble()",
      "options3": "getDouble()",
      "options4": "getDoubleValue()",
      "qsn": "Which of the following methods return the value as a double?",
      "qsnNumber": "260"
    },
    {
      "correctAns": "1",
      "explaination": "isNaN() methods returns true if num specified is not a number, otherwise it returns false.",
      "mark": "2",
      "options1": "isNaN()",
      "options2": "isNumber()",
      "options3": "checkNaN()",
      "options4": "checkNumber()",
      "qsn": "Which of these methods can be used to check whether the given value is a number or not?",
      "qsnNumber": "261"
    },
    {
      "correctAns": "2",
      "explaination": "isInfinite() methods returns true if specified value is an infinite value otherwise it returns false.",
      "mark": "2",
      "options1": "Infinite()",
      "options2": "isInfinite()",
      "options3": "checkInfinite()",
      "options4": "None of the mentioned",
      "qsn": "Which of these method of Double wrapper can be used to check whether a given value is infinite or not?",
      "qsnNumber": "262"
    },
    {
      "correctAns": "4",
      "explaination": "compareTo() methods compare the specified object to be double, if it is not then ClassCastException is thrown.",
      "mark": "2",
      "options1": "IOException",
      "options2": "SystemException",
      "options3": "CastException",
      "options4": "ClassCastException",
      "qsn": "Which of these exceptions is thrown by compareTo() method defined in double wrapper?",
      "qsnNumber": "263"
    },
    {
      "correctAns": "3",
      "explaination": "java.io provides support for input and output operations.",
      "mark": "2",
      "options1": "java.util",
      "options2": "java.lang",
      "options3": "java.io",
      "options4": "all of the mentioned",
      "qsn": "Which of these packages contain classes and interfaces used for input & output operations of a program?",
      "qsnNumber": "264"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "String",
      "options2": "StringReader",
      "options3": "Writer",
      "options4": "File",
      "qsn": "Which of these class is not a member class of java.io package?",
      "qsnNumber": "266"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "DataInput",
      "options2": "ObjectInput",
      "options3": "ObjectFilter",
      "options4": "FileFilter",
      "qsn": "Which of these interface is not a member of java.io package?",
      "qsnNumber": "267"
    },
    {
      "correctAns": "1",
      "explaination": "A File describes properties of a file, a File object is used to obtain or manipulate the information associated with a disk file, such as the permissions, time date, and directories path, and to navigate subdirectories.",
      "mark": "2",
      "options1": "File",
      "options2": "Writer",
      "options3": "InputStream",
      "options4": "Reader",
      "qsn": "Which of these class is not related to input and output stream in terms of functioning?",
      "qsnNumber": "268"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "a file in disk",
      "options2": "directory path",
      "options3": "directory in disk",
      "options4": "none of the mentioned",
      "qsn": "Which of these is specified by a File object?",
      "qsnNumber": "269"
    },
    {
      "correctAns": "2",
      "explaination": "isFile() returns true if called on a file and returns false when called on a directory.",
      "mark": "2",
      "options1": "IsFile()",
      "options2": "isFile()",
      "options3": "Isfile()",
      "options4": "isfile()",
      "qsn": "Which of these is method for testing whether the specified element is a file or a directory?",
      "qsnNumber": "271"
    },
    {
      "correctAns": "1",
      "explaination": "InputStream & OutputStream are designed for byte stream. Reader and writer are designed for character stream.",
      "mark": "2",
      "options1": "InputStream",
      "options2": "Reader",
      "options3": "Writer",
      "options4": "All of the mentioned",
      "qsn": "Which of these classes is used for input and output operation when working with bytes?",
      "qsnNumber": "272"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "FileReader",
      "options2": "FileWriter",
      "options3": "FileInputStream",
      "options4": "InputStreamReader",
      "qsn": " Which of these class is used to read and write bytes in a file?",
      "qsnNumber": "273"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "read()",
      "options2": "scanf()",
      "options3": "get()",
      "options4": "getInteger()",
      "qsn": "Which of these method of InputStream is used to read integer representation of next available byte input?",
      "qsnNumber": "274"
    },
    {
      "correctAns": "4",
      "explaination": "Every method of OutputStream returns void and throws an IOExeption in case of errors.",
      "mark": "2",
      "options1": "int",
      "options2": "float",
      "options3": "byte",
      "options4": "none of the mentioned",
      "qsn": "Which of these data type is returned by every method of OutputStream?",
      "qsnNumber": "275"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "clear()",
      "options2": "flush()",
      "options3": "fflush()",
      "options4": "close()",
      "qsn": "Which of these is a method to clear all the data present in output buffers?",
      "qsnNumber": "276"
    },
    {
      "correctAns": "2",
      "explaination": "write() and print() are the two methods of OutputStream that are used for printing the byte data.",
      "mark": "2",
      "options1": "put()",
      "options2": "print() and write()",
      "options3": "printf()",
      "options4": "write() and read()",
      "qsn": "Which of these method(s) is/are used for writing bytes to an outputstream?",
      "qsnNumber": "277"
    },
    {
      "correctAns": "3",
      "explaination": "InputStream & OutputStream classes under byte stream they are not streams. Character Stream contains all the classes which can work with Unicode.",
      "mark": "2",
      "options1": "InputStream",
      "options2": "OutputStream",
      "options3": "Character Stream",
      "options4": "All of the mentioned",
      "qsn": "Which of these stream contains the classes which can work on character stream?",
      "qsnNumber": "278"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "FileReader",
      "options2": "FileWriter",
      "options3": "FileInputStream",
      "options4": "InputStreamReader",
      "qsn": "Which of these class is used to read characters in a file?",
      "qsnNumber": "283"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "read()",
      "options2": "scanf()",
      "options3": "get()",
      "options4": "getInteger()",
      "qsn": "Which of these method of FileReader class is used to read characters from a file?",
      "qsnNumber": "290"
    },
    {
      "correctAns": "3",
      "explaination": "CharArrayReader is an implementation of an input stream that uses character array as a source. Here array is the input source.",
      "mark": "2",
      "options1": "BufferedReader",
      "options2": "FileReader",
      "options3": "CharArrayReader",
      "options4": "FileArrayReader",
      "qsn": "Which of these class can be used to implement input stream that uses a character array as the source?",
      "qsnNumber": "291"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "clear()",
      "options2": "flush()",
      "options3": "fflush()",
      "options4": "close()",
      "qsn": "Which of these is a method to clear all the data present in output buffers?",
      "qsnNumber": "292"
    },
    {
      "correctAns": "3",
      "explaination": "PushbackReader class allows one or more characters to be returned to the input stream. This allows looking ahead in input stream and performing action accordingly.",
      "mark": "2",
      "options1": "BufferedReader",
      "options2": "Bufferedwriter",
      "options3": "PushbachReader",
      "options4": "CharArrayReader",
      "qsn": "Which of these classes can return more than one character to be returned to input stream?",
      "qsnNumber": "293"
    },
    {
      "correctAns": "4",
      "explaination": "There are only 3 type of memory segment. Stack Segment, Heap Segment and Code Segment.",
      "mark": "2",
      "options1": "Stack Segment",
      "options2": "Heap Segment",
      "options3": "Code Segment",
      "options4": "Register Segment",
      "qsn": "Which of the following is not a segment of memory in java?",
      "qsnNumber": "295"
    },
    {
      "correctAns": "2",
      "explaination": "JVM is Interpreter. It reads .class files which is the byte code generated by compiler line by line and converts it into native OS code.",
      "mark": "2",
      "options1": "Bootstrap",
      "options2": "Interpreter",
      "options3": "Extension",
      "options4": "Compiler",
      "qsn": "What is JVM?",
      "qsnNumber": "296"
    },
    {
      "correctAns": "1",
      "explaination": "Bootstrap is a class loader. It loads the classes into memory.",
      "mark": "2",
      "options1": "Bootstrap",
      "options2": "Compiler",
      "options3": "Heap",
      "options4": "Interpreter",
      "qsn": "Which one of the following is a class loader?",
      "qsnNumber": "299"
    },
    {
      "correctAns": "2",
      "explaination": "Extension loads jar files from lib/ext directory of the JRE.This gives the basic functionality available.",
      "mark": "2",
      "options1": "Bootstrap",
      "options2": "Extension",
      "options3": "System",
      "options4": "Heap",
      "qsn": "Which class loader loads jar files from JDK directory?",
      "qsnNumber": "300"
    },
    {
      "correctAns": "1",
      "explaination": "Young generation is further classified into Eden space and Survivor space. Old generation is also the tenured space. Permanent generation is the non heap space.",
      "mark": "2",
      "options1": "Young",
      "options2": "Old",
      "options3": "Permanent",
      "options4": "Temporary",
      "qsn": "Which of the following is not a memory classification in java?",
      "qsnNumber": "301"
    },
    {
      "correctAns": "3",
      "explaination": "Metaspace is the replacement of PermGen in java 8. It is very similar to PermGen except that it resizes itself dynamically. Thus, it is unbounded.",
      "mark": "2",
      "options1": "Code Cache",
      "options2": "Tenured Space",
      "options3": "Metaspace",
      "options4": "Eden space",
      "qsn": "What is the java 8 update of PermGen?",
      "qsnNumber": "302"
    },
    {
      "correctAns": "4",
      "explaination": "The permanent generation holds objects which JVM finds convenient to have the garbage collector. Objects describing classes and methods, as well as the classes and methods themselves are a part of Permanent generation.",
      "mark": "2",
      "options1": "Eden space",
      "options2": "Survivor space",
      "options3": "Tenured space",
      "options4": "Permanent space",
      "qsn": "Classes and Methods are stored in which space?",
      "qsnNumber": "303"
    },
    {
      "correctAns": "2",
      "explaination": "When a string is created ; if the string already exists in the pool, the reference of the existing string will be returned, else a new object is created and its reference is returned.",
      "mark": "2",
      "options1": "Java Stack",
      "options2": "Java Heap",
      "options3": "Permanent Generation",
      "options4": "Metaspace",
      "qsn": "Where is String Pool stored?",
      "qsnNumber": "304"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "IllegalException",
      "options2": "Argument Exception",
      "options3": "IllegalArgumentException",
      "options4": "IllegalMethodArgumentExcepetion",
      "qsn": "Which of these exceptions handles the situations when illegal argument is used to invoke a method?",
      "qsnNumber": "305"
    },
    {
      "correctAns": "4",
      "explaination": "Array size must always be positive, if we declare an array with negative size then built in exception “NegativeArraySizeException” is thrown by the java’s run time system.",
      "mark": "2",
      "options1": "IllegalArrayException",
      "options2": "IllegalArraySizeExeption",
      "options3": "NegativeArrayException",
      "options4": "NegativeArraySizeExeption",
      "qsn": "Which of these exceptions will be thrown if we declare an array with negative size?",
      "qsnNumber": "306"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "java.io",
      "options2": "java.util",
      "options3": "java.lang",
      "options4": "java.net",
      "qsn": "Which of these packages contain all the Java’s built in exceptions??",
      "qsnNumber": "307"
    },
    {
      "correctAns": "2",
      "explaination": "If we use null reference anywhere in the code where the value stored in that reference is used then NullPointerException occurs.",
      "mark": "2",
      "options1": "ArithmeticException",
      "options2": "NullPointerException",
      "options3": "IllegalAccessException",
      "options4": "IllegalOperationException",
      "qsn": "Which of these exceptions will be thrown if we use null reference for an arithmetic operation?",
      "qsnNumber": "308"
    },
    {
      "correctAns": "2",
      "explaination": "Exception class contains all the methods necessary for defining an exception. The class contains the Throwable class.",
      "mark": "2",
      "options1": "java.lang",
      "options2": "Exception",
      "options3": "RunTime",
      "options4": "System",
      "qsn": "Which of these class is used to create user defined exception?",
      "qsnNumber": "309"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "Math",
      "options2": "Process",
      "options3": "System",
      "options4": "Object",
      "qsn": "Which of these class provides various types of rounding functions?",
      "qsnNumber": "310"
    },
    {
      "correctAns": "1",
      "explaination": "ceil(double X) returns the smallest whole number greater than or equal to variable X.",
      "mark": "2",
      "options1": "double ceil(double X)",
      "options2": "double floor(double X)",
      "options3": "double max(double X)",
      "options4": "double min(double X)",
      "qsn": "Which of these method return a smallest whole number greater than or equal to variable X?",
      "qsnNumber": "311"
    },
    {
      "correctAns": "2",
      "explaination": "double floor(double X) returns a largest whole number less than or equal to variable X..",
      "mark": "2",
      "options1": "double ceil(double X)",
      "options2": "double floor(double X)",
      "options3": "double max(double X)",
      "options4": "double min(double X)",
      "qsn": "Which of these method return a largest whole number less than or equal to variable X?",
      "qsnNumber": "312"
    },
    {
      "correctAns": "4",
      "explaination": "rint() rounds up a variable to nearest integer.",
      "mark": "2",
      "options1": "max()",
      "options2": "min()",
      "options3": "abs()",
      "options4": "rint()",
      "qsn": "Which of these method is a rounding function of Math class?",
      "qsnNumber": "313"
    },
    {
      "correctAns": "1",
      "explaination": "Math class contains all the floating point functions that are used for geometry, trigonometry, as well as several general purpose methods. Example : sin(), cos(), exp(), sqrt() etc.",
      "mark": "2",
      "options1": "Math",
      "options2": "Process",
      "options3": "System",
      "options4": "Object",
      "qsn": "Which of these class contains only floating point functions?",
      "qsnNumber": "314"
    },
    {
      "correctAns": "1",
      "explaination": "abs() returns the absolute value of a variable.",
      "mark": "2",
      "options1": "abs()",
      "options2": "absolute()",
      "options3": "absolutevariable()",
      "options4": "none of the mentioned",
      "qsn": "Which of function return absolute value of a variable?",
      "qsnNumber": "315"
    },
    {
      "correctAns": "3",
      "explaination": "decode() methods returns a Byte object that contains the value specified by string.",
      "mark": "2",
      "options1": "toString()",
      "options2": "getString()",
      "options3": "decode()",
      "options4": "encode()",
      "qsn": "Which of these methods of Byte wrapper can be used to obtain Byte object from a string?",
      "qsnNumber": "316"
    },
    {
      "correctAns": "1",
      "explaination": "doubleValue() returns the value of invoking object as double.",
      "mark": "2",
      "options1": "doubleValue()",
      "options2": "converDouble()",
      "options3": "getDouble()",
      "options4": "getDoubleValue()",
      "qsn": "Which of the following methods Byte wrapper return the value as a double?",
      "qsnNumber": "317"
    },
    {
      "correctAns": "4",
      "explaination": "Number is an abstract class containing subclasses Double, Float, Byte, Short, Integer and Long.",
      "mark": "2",
      "options1": "Long",
      "options2": "Digits",
      "options3": "Float",
      "options4": "Number",
      "qsn": "Which of these is a super class of wrappers Byte and short wrappers?",
      "qsnNumber": "318"
    },
    {
      "correctAns": "2",
      "explaination": "isInfinite() methods is defined in Integer and Long Wrappers, returns true if specified value is an infinite value otherwise it returns false.",
      "mark": "2",
      "options1": "intValue()",
      "options2": "isInfinite()",
      "options3": "toString()",
      "options4": "hashCode()",
      "qsn": "Which of these methods is not defined in both Byte and Short wrappers?",
      "qsnNumber": "319"
    },
    {
      "correctAns": "4",
      "explaination": "compareTo() methods compare the specified object to be double, if it is not then ClassCastException is thrown.",
      "mark": "2",
      "options1": "IOException",
      "options2": "SystemException",
      "options3": "CastException",
      "options4": "ClassCastException",
      "qsn": "Which of these exceptions is thrown by compareTo() method defined in double wrapper?",
      "qsnNumber": "320"
    },
    {
      "correctAns": "3",
      "explaination": "To obtain the char value contained in a Character object, we use charValue() method.",
      "mark": "2",
      "options1": "get()",
      "options2": "getVhar()",
      "options3": "charValue()",
      "options4": "getCharacter()",
      "qsn": "Which of these methods of Character wrapper can be used to obtain the char value contained in Character object.",
      "qsnNumber": "321"
    },
    {
      "correctAns": "4",
      "explaination": "Character wrapper defines 5 constants – MAX_RADIX, MIN_RADIX, MAX_VALUE, MIN_VALUE & TYPE.",
      "mark": "2",
      "options1": "MAX_RADIX",
      "options2": "MAX_VALUE",
      "options3": "TYPE",
      "options4": "All of the mentioned",
      "qsn": "Which of the following constant are defined in Character wrapper?",
      "qsnNumber": "322"
    },
    {
      "correctAns": "4",
      "explaination": "Number is an abstract class containing subclasses Double, Float, Byte, Short, Character, Integer and Long.",
      "mark": "2",
      "options1": "Long",
      "options2": "Digits",
      "options3": "Float",
      "options4": "Number",
      "qsn": "Which of these is a super class of Character wrapper?",
      "qsnNumber": "323"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "isIdentifier()",
      "options2": "isJavaIdentifier()",
      "options3": "isJavaIdentifierPart()",
      "options4": "none of the mentioned",
      "qsn": "Which of these methods is used to know whether a given Character object is part of Java’s Identifiers?",
      "qsnNumber": "324"
    },
    {
      "correctAns": "4",
      "explaination": "isDefined() returns true if ch is defined by Unicode. Otherwise, it returns false.",
      "mark": "2",
      "options1": "Latin",
      "options2": "ASCII",
      "options3": "ANSI",
      "options4": "UNICODE",
      "qsn": "Which of these coding techniques is used by method isDefined()?",
      "qsnNumber": "325"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "getBool()",
      "options2": "booleanValue()",
      "options3": "getbooleanValue()",
      "options4": "getboolValue()",
      "qsn": "Which of these methods of Boolean wrapper returns boolean equivalent of an object.",
      "qsnNumber": "326"
    },
    {
      "correctAns": "4",
      "explaination": "Boolean wrapper defines 3 constants – TRUE, FALSE & TYPE.",
      "mark": "2",
      "options1": "TRUE",
      "options2": "FALSE",
      "options3": "TYPE",
      "options4": "All of the mentioned",
      "qsn": "Which of the following constant are defined in Boolean wrapper?",
      "qsnNumber": "327"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "getString()",
      "options2": "toString()",
      "options3": "converString()",
      "options4": "getStringObject()",
      "qsn": "Which of these methods return string equivalent of Boolean object?",
      "qsnNumber": "328"
    },
    {
      "correctAns": "1",
      "explaination": "valueOf() returns true if the specified string contains “true” in lower or uppercase and false otherwise.",
      "mark": "2",
      "options1": "valueOf()",
      "options2": "valueOfString()",
      "options3": "getString()",
      "options4": "none of the mentioned",
      "qsn": "Which of these methods is used to know whether a string contains “true”?",
      "qsnNumber": "329"
    },
    {
      "correctAns": "4",
      "explaination": "Void class has only one field – TYPE, which holds a reference to the Class object for type void. We do not create instance of this class.",
      "mark": "2",
      "options1": "Character",
      "options2": "Boolean",
      "options3": "Byte",
      "options4": "void",
      "qsn": "Which of these class have only one field?",
      "qsnNumber": "330"
    },
    {
      "correctAns": "2",
      "explaination": "SystemMath class defines complete set of mathematical methods that are parallel those in Math class. The difference is that the StrictMath version is guaranteed to generate precisely identical results across all Java implementations.",
      "mark": "2",
      "options1": "SystemMath",
      "options2": "StrictMath",
      "options3": "Compiler",
      "options4": "ClassLoader",
      "qsn": "Which of these class contains all the methods present in Math class?",
      "qsnNumber": "331"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "rand()",
      "options2": "random()",
      "options3": "randomNumber()",
      "options4": "randGenerator()",
      "qsn": "Which of these method return a pseudorandom number?",
      "qsnNumber": "332"
    },
    {
      "correctAns": "4",
      "explaination": "IEEEremainder() returns the remainder of dividend / divisor.",
      "mark": "2",
      "options1": "remainder()",
      "options2": "getRemainder()",
      "options3": "CSIremainder()",
      "options4": "IEEEremainder()",
      "qsn": "Which of these method returns the remainder of dividend / divisor?",
      "qsnNumber": "333"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "toRadian()",
      "options2": "toDegree()",
      "options3": "convertRadian()",
      "options4": "converDegree()",
      "qsn": "Which of these method converts radians to degrees?",
      "qsnNumber": "334"
    },
    {
      "correctAns": "3",
      "explaination": "toRadian() and toDegree() methods were added by Java 2.0 before that there was no method which could directly convert degree into radians and vice versa.",
      "mark": "2",
      "options1": "Java 1.0",
      "options2": "Java 1.5",
      "options3": "Java 2.0",
      "options4": "Java 3.0",
      "qsn": "toRadian() and toDegree() methods were added by which version of Java?",
      "qsnNumber": "335"
    },
    {
      "correctAns": "1",
      "explaination": "ciel(double X) returns the smallest whole number greater than or equal to variable X.",
      "mark": "2",
      "options1": "double ciel(double X)",
      "options2": "double floor(double X)",
      "options3": "double max(double X)",
      "options4": "double min(double X)",
      "qsn": "Which of these method return a smallest whole number greater than or equal to variable X?",
      "qsnNumber": "336"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "Class",
      "options2": "System",
      "options3": "Runtime",
      "options4": "ClassLoader",
      "qsn": "Which of these classes encapsulate runtime enviroment?",
      "qsnNumber": "337"
    },
    {
      "correctAns": "3",
      "explaination": "Every method of Runtime class throws SecurityException.",
      "mark": "2",
      "options1": "IOException",
      "options2": "SystemException",
      "options3": "SecurityException",
      "options4": "RuntimeException",
      "qsn": "Which of the following exceptions is thrown by every method of Runtime class?",
      "qsnNumber": "338"
    },
    {
      "correctAns": "2",
      "explaination": "TotalMemory() returns the total number of bytes available to the program.",
      "mark": "2",
      "options1": "getMemory()",
      "options2": "TotalMemory()",
      "options3": "SystemMemory()",
      "options4": "getProcessMemory()",
      "qsn": "Which of these methods returns the total number of bytes of memory available to the program?",
      "qsnNumber": "339"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "Class",
      "options2": "System",
      "options3": "Runtime",
      "options4": "ClassLoader",
      "qsn": "Which of these class defines how the classes are loaded?",
      "qsnNumber": "340"
    },
    {
      "correctAns": "4",
      "explaination": "findSystemClass() returns a class object given its name.",
      "mark": "2",
      "options1": "getClass()",
      "options2": "findClass()",
      "options3": "getSystemClass()",
      "options4": "findSystemClass()",
      "qsn": "WWhich of these methods return a class object given its name?",
      "qsnNumber": "341"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "IOException",
      "options2": "SystemException",
      "options3": "ClassFormatError",
      "options4": "ClassNotFoundException",
      "qsn": "Which of these Exceptions is thrown by loadClass() method of ClassLoader class?",
      "qsnNumber": "342"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "Class",
      "options2": "System",
      "options3": "Runtime",
      "options4": "Catche",
      "qsn": "Which of these classes encapsulate runtime state of an object?",
      "qsnNumber": "343"
    },
    {
      "correctAns": "4",
      "explaination": "Boolean wrapper defines 3 constants – TRUE, FLASE & TYPE.",
      "mark": "2",
      "options1": "TRUE",
      "options2": "FALSE",
      "options3": "TYPE",
      "options4": "All of the mentioned",
      "qsn": "Which of the following constant are defined in Boolean wrapper?",
      "qsnNumber": "344"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "getClass()",
      "options2": "Class()",
      "options3": "WhoseClass()",
      "options4": "WhoseObject()",
      "qsn": "Which of these methods returns the class of an object?",
      "qsnNumber": "345"
    },
    {
      "correctAns": "1",
      "explaination": "valueOf() returns true if the specified string contains “true” in lower or uppercase and false otherwise.",
      "mark": "2",
      "options1": "valueOf()",
      "options2": "valueOfString()",
      "options3": "getString()",
      "options4": "None of the mentioned",
      "qsn": "Which of these methods is used to know whether a string contains “true”?",
      "qsnNumber": "346"
    },
    {
      "correctAns": "4",
      "explaination": "Void class has only one field – TYPE, which holds a reference to the Class object for type void. We do not create instance of this class.",
      "mark": "2",
      "options1": "Character",
      "options2": "Boolean",
      "options3": "Byte",
      "options4": "void",
      "qsn": "Which of these class have only one field?",
      "qsnNumber": "347"
    },
    {
      "correctAns": "1",
      "explaination": "Runnable interface defines all the methods for handling thread operations in Java.",
      "mark": "2",
      "options1": "Runnable interface",
      "options2": "Math interface",
      "options3": "System interface",
      "options4": "ThreadHandling interface",
      "qsn": "Which of interface contains all the methods used for handling thread related operations in Java?",
      "qsnNumber": "348"
    },
    {
      "correctAns": "3",
      "explaination": "Thread class is used to make threads in java, Thread encapsulates a thread of execution. To create a new thread the program will either extend Thread or implement the Runnable interface.",
      "mark": "2",
      "options1": "String",
      "options2": "System",
      "options3": "Thread",
      "options4": "Runnable",
      "qsn": "Which of these class is used to make a thread?",
      "qsnNumber": "349"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "Runnable",
      "options2": "Connections",
      "options3": "Set",
      "options4": "MapConnections",
      "qsn": "Which of these interface is implemented by Thread class?",
      "qsnNumber": "350"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "sleep()",
      "options2": "terminate()",
      "options3": "suspend()",
      "options4": "stop()",
      "qsn": "Which of these method of Thread class is used to suspend a thread for a period of time?",
      "qsnNumber": "351"
    },
    {
      "correctAns": "3",
      "explaination": "toRadian() and toDegree() methods were added by Java 2.0 before that there was no method which could directly convert degree into radians and vice versa.",
      "mark": "2",
      "options1": "Java 1.0",
      "options2": "Java 1.5",
      "options3": "Java 2.0",
      "options4": "Java 3.0",
      "qsn": "toRadian() and toDegree() methods were added by which version of Java?",
      "qsnNumber": "352"
    },
    {
      "correctAns": "3",
      "explaination": "Java application uses ProcessBuilder object to create a new process. By default, same set of environment variables passed which are set in application’s virtual machine process.",
      "mark": "2",
      "options1": "Process",
      "options2": "Builder",
      "options3": "ProcessBuilder",
      "options4": "CreateBuilder",
      "qsn": "Which object Java application uses to create a new process?",
      "qsnNumber": "353"
    },
    {
      "correctAns": "2",
      "explaination": "Java system properties are only used and accessible by the processes they are added.",
      "mark": "2",
      "options1": "Java system properties are accessible by any process",
      "options2": "Java system properties are accessible by processes they are added to",
      "options3": "Java system properties are retrieved by System.getenv()",
      "options4": "Java system prooerties are set by System.setenv()",
      "qsn": "Which of the following is true about Java system properties?",
      "qsnNumber": "354"
    },
    {
      "correctAns": "3",
      "explaination": "java.home is the installation directory of Java Runtime Environment.",
      "mark": "2",
      "options1": "user.home",
      "options2": "java.class.path",
      "options3": "java.home",
      "options4": "user.dir",
      "qsn": "Which system property stores installation directory of JRE?",
      "qsnNumber": "355"
    },
    {
      "correctAns": "4",
      "explaination": "System.getProperty(“variable”) returns null value. Because, variable is not a property and if property does not exist, this method returns null value.",
      "mark": "2",
      "options1": "compilation error",
      "options2": "value stored in variable",
      "options3": "runtime error",
      "options4": "null",
      "qsn": "What does System.getProperty(“variable”) return?",
      "qsnNumber": "356"
    },
    {
      "correctAns": "3",
      "explaination": "The changes made by setProperties method are not persistent. Hence, it does not affect future invocation.",
      "mark": "2",
      "options1": "setProperties method changes the set of Java Properties which are persistent",
      "options2": "Changing the system properties within an application will affect future invocations",
      "options3": "setProperties method changes the set of Java Properties which are not persistent",
      "options4": "setProperties writes the values directly into the file which stores all the properties",
      "qsn": "What is true about setProperties method?",
      "qsnNumber": "357"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "@Environment",
      "options2": "@Variable",
      "options3": "@Property",
      "options4": "@Autowired",
      "qsn": "How to use environment properties in the class?",
      "qsnNumber": "358"
    },
    {
      "correctAns": "1",
      "explaination": "@Value are used to inject the properties and assign them to variables.",
      "mark": "2",
      "options1": "@Value(“${my.property}”)private String prop;",
      "options2": "@Property(“${my.property}”)private String prop;",
      "options3": "@Environment(“${my.property}”)private String prop;",
      "options4": "@Env(“${my.property}”)private String prop;",
      "qsn": "How to assign values to variable using property?",
      "qsnNumber": "359"
    },
    {
      "correctAns": "2",
      "explaination": "JAVA_HOME is used to store path to the java installation.",
      "mark": "2",
      "options1": "JAVA",
      "options2": "JAVA_HOME",
      "options3": "CLASSPATH",
      "options4": "MAVEN_HOME",
      "qsn": "Which environment variable is used to set java path?",
      "qsnNumber": "360"
    },
    {
      "correctAns": "3",
      "explaination": "This method can be used to load files using relative path to the package of the class.",
      "mark": "2",
      "options1": "InputStream in =this.getClass().getResource(“SomeTextFile.txt”);",
      "options2": "InputStream in =this.getClass().getResourceClasspath(“SomeTextFile.txt”);",
      "options3": "InputStream in =this.getClass().getResourceAsStream(“SomeTextFile.txt”);",
      "options4": "InputStream in =this.getClass().getResource(“classpath:/SomeTextFile.txt”);",
      "qsn": "How to read a classpath file?",
      "qsnNumber": "361"
    },
    {
      "correctAns": "1",
      "explaination": "Serialization is the process of writing the state of an object to a byte stream. This is used when you want to save the state of your program to persistent storage area.",
      "mark": "2",
      "options1": "Serialization",
      "options2": "Externalization",
      "options3": "File Filtering",
      "options4": "All of the mentioned",
      "qsn": "Which of these is a process of writing the state of an object to a byte stream?",
      "qsnNumber": "362"
    },
    {
      "correctAns": "1",
      "explaination": "Serialization and deserialization occur automatically by java runtime system, Garbage collection also occur automatically but is done by CPU or the operating system not by the java runtime system.",
      "mark": "2",
      "options1": "Serialization",
      "options2": "Garbage collection",
      "options3": "File Filtering",
      "options4": "All of the mentioned",
      "qsn": "Which of these process occur automatically by java runtime system?",
      "qsnNumber": "363"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "Serializable",
      "options2": "Externalization",
      "options3": "FileFilter",
      "options4": "ObjectInput",
      "qsn": "Which of these is an interface for control over serialization and deserialization?",
      "qsnNumber": "364"
    },
    {
      "correctAns": "3",
      "explaination": "ObjectOutput interface extends the DataOutput interface and supports object serialization.",
      "mark": "2",
      "options1": "Serializable",
      "options2": "Externalization",
      "options3": "ObjectOutput",
      "options4": "ObjectInput",
      "qsn": "Which of these interface extends DataOutput interface?",
      "qsnNumber": "365"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "clear()",
      "options2": "flush()",
      "options3": "fflush()",
      "options4": "close()",
      "qsn": "Which of these is a method of ObjectOutput interface used to finalize the output state so that any buffers are cleared?",
      "qsnNumber": "366"
    },
    {
      "correctAns": "4",
      "explaination": "writeObject() is used to write an object into invoking stream, it can be input stream or output stream.",
      "mark": "2",
      "options1": "write()",
      "options2": "Write()",
      "options3": "StreamWrite()",
      "options4": "writeObject()",
      "qsn": "Which of these is method of ObjectOutput interface used to write the object to input or output stream as required?",
      "qsnNumber": "367"
    },
    {
      "correctAns": "2",
      "explaination": "A Java object is serializable if class or any its superclass implements java.io.Serializable or its subinterface java.io.Externalizable.",
      "mark": "2",
      "options1": "If class implements java.io.Serializable class",
      "options2": "If class or any superclass implements java.io.Serializable interface",
      "options3": "Any object is serializable",
      "options4": "No object is serializable",
      "qsn": "How an object can become serializable?",
      "qsnNumber": "368"
    },
    {
      "correctAns": "1",
      "explaination": "Serialization in Java is the process of turning object in memory into stream of bytes.",
      "mark": "2",
      "options1": "Turning object in memory into stream of bytes",
      "options2": "Turning stream of bytes into an object in memory",
      "options3": "Turning object in memory into stream of bits",
      "options4": "Turning stream of bits into an object in memory",
      "qsn": "What is serialization?",
      "qsnNumber": "369"
    },
    {
      "correctAns": "2",
      "explaination": "Deserialization is the reverse process of serialization which is turning stream of bytes into an object in memory.",
      "mark": "2",
      "options1": "Turning object in memory into stream of bytes",
      "options2": "Turning stream of bytes into an object in memory",
      "options3": "Turning object in memory into stream of bits",
      "options4": "Turning stream of bits into an object in memory",
      "qsn": "What is deserialization?",
      "qsnNumber": "370"
    },
    {
      "correctAns": "4",
      "explaination": "Serializable interface does not have any method. It is also called as marker interface.",
      "mark": "2",
      "options1": "1",
      "options2": "2",
      "options3": "3",
      "options4": "0",
      "qsn": "How many methods Serializable has?",
      "qsnNumber": "371"
    },
    {
      "correctAns": "3",
      "explaination": "All static and transient variables are not serialized.",
      "mark": "2",
      "options1": "Private",
      "options2": "Protected",
      "options3": "Static",
      "options4": "Throwable",
      "qsn": "What type of members are not serialized?",
      "qsnNumber": "372"
    },
    {
      "correctAns": "3",
      "explaination": "If member of a class does not implement serialization, NotSerializationException will be thrown.",
      "mark": "2",
      "options1": "RuntimeException",
      "options2": "SerializableException",
      "options3": "NotSerializableException",
      "options4": "UnSerializedException",
      "qsn": "If member does not implement serialization, which exception would be thrown?",
      "qsnNumber": "373"
    },
    {
      "correctAns": "1",
      "explaination": "writeObject() and readObject() methods should be implemented to avoid Java serialization.",
      "mark": "2",
      "options1": "writeObject()",
      "options2": "readWriteObject()",
      "options3": "writeReadObject()",
      "options4": "unSerializaedObject()",
      "qsn": "Which of the following methods is used to avoid serialization of new class whose super class already implements Serialization?",
      "qsnNumber": "374"
    },
    {
      "correctAns": "3",
      "explaination": "Using readObject(), writeObject(), readExternal() and writeExternal() methods Serialization and DeSerialization are implemented.",
      "mark": "2",
      "options1": "readObject()",
      "options2": "readExternal()",
      "options3": "readWriteObject()",
      "options4": "writeObject()",
      "qsn": "Which of the following methods is not used while Serialization and DeSerialization?",
      "qsnNumber": "375"
    },
    {
      "correctAns": "4",
      "explaination": "Deserialization is a process by which the data written in the stream can be extracted out from the stream.",
      "mark": "2",
      "options1": "Serialization",
      "options2": "Externalization",
      "options3": "File Filtering",
      "options4": "Deserialization",
      "qsn": "Which of these is a process of extracting/removing the state of an object from a stream?",
      "qsnNumber": "376"
    },
    {
      "correctAns": "4",
      "explaination": "Serialization, deserialization and Memory allocation occur automatically by java run time system.",
      "mark": "2",
      "options1": "Serialization",
      "options2": "Memory allocation",
      "options3": "Deserialization",
      "options4": "All of the mentioned",
      "qsn": "Which of these process occur automatically by java run time system?",
      "qsnNumber": "377"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "Serializable",
      "options2": "Externalization",
      "options3": "FileFilter",
      "options4": "ObjectInput",
      "qsn": "Which of these is an interface for control over serialization and deserialization?",
      "qsnNumber": "378"
    },
    {
      "correctAns": "4",
      "explaination": "ObjectInput interface extends the DataInput interface and supports object serialization.",
      "mark": "2",
      "options1": "Serializable",
      "options2": "Externalization",
      "options3": "ObjectOutput",
      "options4": "ObjectInput",
      "qsn": "Which of these interface extends DataInput interface?",
      "qsnNumber": "379"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "int read()",
      "options2": "void close()",
      "options3": "Object readObject()",
      "options4": "Object WriteObject()",
      "qsn": "Which of these is a method of ObjectInput interface used to deserialize an object from a stream?",
      "qsnNumber": "380"
    },
    {
      "correctAns": "2",
      "explaination": "ObjectInputStream class extends the InputStream class and implements the ObjectInput interface.",
      "mark": "2",
      "options1": "ObjectStream",
      "options2": "ObjectInputStream",
      "options3": "ObjectOutput",
      "options4": "ObjectInput",
      "qsn": "Which of these class extend InputStream class?",
      "qsnNumber": "381"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "java.io",
      "options2": "java.util",
      "options3": "java.net",
      "options4": "java.network",
      "qsn": "Which of these package contains classes and interfaces for networking?",
      "qsnNumber": "382"
    },
    {
      "correctAns": "1",
      "explaination": "TCP/IP – Transfer control protocol/Internet Protocol is used to break data into small packets an send them to an address across a network.",
      "mark": "2",
      "options1": "TCP/IP",
      "options2": "DNS",
      "options3": "Socket",
      "options4": "Proxy Server",
      "qsn": "Which of these is a protocol for breaking and sending packets to an address across a network?",
      "qsnNumber": "383"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "10",
      "options2": "1024",
      "options3": "2048",
      "options4": "512",
      "qsn": "How many ports of TCP/IP are reserved for specific protocols?",
      "qsnNumber": "384"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "8",
      "options2": "16",
      "options3": "32",
      "options4": "64",
      "qsn": "How many bits are in a single IP address?",
      "qsnNumber": "385"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "Data Network Service",
      "options2": "Data Name Service",
      "options3": "Domain Network Service",
      "options4": "Domain Name Service",
      "qsn": "Which of these is a full form of DNS?",
      "qsnNumber": "386"
    },
    {
      "correctAns": "3",
      "explaination": "InetAddress class encapsulate both IP address and DNS, we can interact with this class by using name of an IP host.",
      "mark": "2",
      "options1": "DatagramPacket",
      "options2": "URL",
      "options3": "InetAddress",
      "options4": "ContentHandler",
      "qsn": "Which of these class is used to encapsulate IP address and DNS?",
      "qsnNumber": "387"
    },
    {
      "correctAns": "1",
      "explaination": "LogMessage is a simple interface that is used to abstract the output of messages from the httpd.",
      "mark": "2",
      "options1": "LogMessage",
      "options2": "LogResponse",
      "options3": "Httpdserver",
      "options4": "httpdResponse",
      "qsn": "Which of these interface abstractes the output of messages from httpd?",
      "qsnNumber": "388"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "httpServer",
      "options2": "ServerSockets",
      "options3": "MimeHeader",
      "options4": "HttpResponse",
      "qsn": "Which of these class is used to create servers that listen for either local or remote client programs?",
      "qsnNumber": "389"
    },
    {
      "correctAns": "3",
      "explaination": "MIME is an internet standard for communicating multimedia content over email. The HTTP protocol uses and extends the notion of MIME headers to pass attribute pairs between HTTP client and server.",
      "mark": "2",
      "options1": "http",
      "options2": "https",
      "options3": "Mime",
      "options4": "httpd",
      "qsn": "Which of these is a standard for communicating multimedia content over email?",
      "qsnNumber": "390"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "parse()",
      "options2": "toString()",
      "options3": "getString()",
      "options4": "parseString()",
      "qsn": "Which of these methods is used to make raw MIME formatted string?",
      "qsnNumber": "391"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "http",
      "options2": "httpDecoder",
      "options3": "httpConnection",
      "options4": "httpd",
      "qsn": "Which of these class is used for operating on request from the client to the server?",
      "qsnNumber": "392"
    },
    {
      "correctAns": "2",
      "explaination": "toString() does the reverse of parse() method, it is used to return the string equivalent of the values stores on MimeHeader.",
      "mark": "2",
      "options1": "string()",
      "options2": "toString()",
      "options3": "convertString()",
      "options4": "getString()",
      "qsn": "Which of these method of MimeHeader is used to return the string equivalent of the values stores on MimeHeader?",
      "qsnNumber": "393"
    },
    {
      "correctAns": "4",
      "explaination": "There are 5 instance variables : port, docRoot, log, cache and stopFlag. All of them are private.",
      "mark": "2",
      "options1": "port",
      "options2": "cache",
      "options3": "log",
      "options4": "All of the mentioned",
      "qsn": "Which of these is an instance variable of class httpd?",
      "qsnNumber": "394"
    },
    {
      "correctAns": "4",
      "explaination": "The getRawRequest() method reads data from a stream until it gets two consecutive newline characters.",
      "mark": "2",
      "options1": "getDta()",
      "options2": "GetResponse()",
      "options3": "getStream()",
      "options4": "getRawRequest()",
      "qsn": "Which of these methods of httpd class is used to read data from the stream?",
      "qsnNumber": "395"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "log()",
      "options2": "logEntry()",
      "options3": "logHttpd()",
      "options4": "logResponse()",
      "qsn": "Which of these method of httpd class is used to get report on each hit to HTTP server?",
      "qsnNumber": "396"
    },
    {
      "correctAns": "3",
      "explaination": "serveFromCatche() is a boolean method that attempts to find a particular URL in the cache. If it is successful then the content of that cache entry are written to the client, otherwise it returns false.",
      "mark": "2",
      "options1": "findfromCache()",
      "options2": "findFromCache()",
      "options3": "serveFromCache()",
      "options4": "getFromCache()",
      "qsn": "Which of these method is used to find a URL from the cache of httpd?",
      "qsnNumber": "397"
    },
    {
      "correctAns": "4",
      "explaination": "None",
      "mark": "2",
      "options1": "hits",
      "options2": "hitstocache",
      "options3": "hits_to_cache",
      "options4": "hits.to.cache",
      "qsn": "Which of these variables stores the number of hits that are successfully served out of cache?",
      "qsnNumber": "398"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "http",
      "options2": "httpDecoder",
      "options3": "httpConnection",
      "options4": "httpd",
      "qsn": "Which of these class is used for operating on request from the client to the server?",
      "qsnNumber": "399"
    },
    {
      "correctAns": "1",
      "explaination": "The writeDiskCache() method takes an UrlCacheEntry object and writes it persistently into the local disk. It constructs directory names out of URL, making sure to replace the slash(/) characters with system dependent seperatorChar.",
      "mark": "2",
      "options1": "writeDiskCache()",
      "options2": "writetoDisk()",
      "options3": "writeCache()",
      "options4": "writeDiskEntry()",
      "qsn": "Which of these method of httpd class is used to write UrlCacheEntry object into local disk?",
      "qsnNumber": "400"
    },
    {
      "correctAns": "1",
      "explaination": "run() method is called when the server thread is started.",
      "mark": "2",
      "options1": "run()",
      "options2": "start()",
      "options3": "runThread()",
      "options4": "startThread()",
      "qsn": "Which of these method is used to start a server thread?",
      "qsnNumber": "401"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "Handle()",
      "options2": "HandleGet()",
      "options3": "handleGet()",
      "options4": "Handleget()",
      "qsn": "Which of these method is called when http daemon is acting like a normal web server?",
      "qsnNumber": "402"
    },
    {
      "correctAns": "1",
      "explaination": "URL is Uniform Resource Locator.",
      "mark": "2",
      "options1": "Uniform Resource Locator",
      "options2": "Uniform Resource Latch",
      "options3": "Universal Resource Locator",
      "options4": "Universal Resource Latch",
      "qsn": "What does URL stands for?",
      "qsnNumber": "403"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "URLNotFound",
      "options2": "URLSourceNotFound",
      "options3": "MalformedURLException",
      "options4": "URLNotFoundException",
      "qsn": "Which of these exception is thrown by URL class’s constructors?",
      "qsnNumber": "404"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "host()",
      "options2": "getHost()",
      "options3": "GetHost()",
      "options4": "gethost()",
      "qsn": "Which of these methods is used to know host of an URL?",
      "qsnNumber": "405"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "fullHost()",
      "options2": "getHost()",
      "options3": "ExternalForm()",
      "options4": "toExternalForm()",
      "qsn": "Which of these methods is used to know the full URL of an URL object?",
      "qsnNumber": "406"
    },
    {
      "correctAns": "4",
      "explaination": "URL, URLDecoder and URLConnection all there are used to access information stored in a URL.",
      "mark": "2",
      "options1": "URL",
      "options2": "URLDecoder",
      "options3": "URLConnection",
      "options4": "All of the mentioned",
      "qsn": "Which of these class is used to access actual bits or content information of a URL?",
      "qsnNumber": "407"
    },
    {
      "correctAns": "3",
      "explaination": "InetAddress class encapsulate both IP address and DNS, we can interact with this class by using name of an IP host.",
      "mark": "2",
      "options1": "DatagramPacket",
      "options2": "URL",
      "options3": "InetAddress",
      "options4": "ContentHandler",
      "qsn": "Which of these class is used to encapsulate IP address and DNS?",
      "qsnNumber": "408"
    },
    {
      "correctAns": "2",
      "explaination": "HttpResponse is wrapper around everything associated with a reply from an http server.",
      "mark": "2",
      "options1": "HTTP",
      "options2": "HttpResponse",
      "options3": "HttpRequest",
      "options4": "httpserver",
      "qsn": "Which of these is wrapper around everything associated with a reply from an http server?",
      "qsnNumber": "409"
    },
    {
      "correctAns": "1",
      "explaination": "for a URL to be accessed from remote location http protocol must be used.",
      "mark": "2",
      "options1": "http",
      "options2": "https",
      "options3": "Any Protocol can be used",
      "options4": "None of the mentioned",
      "qsn": "Which of these transfer protocol must be used so that URL can be accessed by URLConnection class object?",
      "qsnNumber": "410"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "LastModified()",
      "options2": "getLastModified()",
      "options3": "GetLastModified()",
      "options4": "getlastModified()",
      "qsn": "Which of these methods is used to know when was the URL last modified?",
      "qsnNumber": "411"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "ContentType()",
      "options2": "contentType()",
      "options3": "getContentType()",
      "options4": "GetContentType()",
      "qsn": "Which of these methods is used to know the type of content used in the URL?",
      "qsnNumber": "412"
    },
    {
      "correctAns": "4",
      "explaination": "URL, URLDecoder and URLConnection all there are used to access information stored in a URL.",
      "mark": "2",
      "options1": "URL",
      "options2": "URLDecoder",
      "options3": "URLConnection",
      "options4": "All of the mentioned",
      "qsn": "Which of these class is used to access actual bits or content information of a URL?",
      "qsnNumber": "413"
    },
    {
      "correctAns": "4",
      "explaination": "When we send a request to a http server it respond with a status code this status code is stored in statusCode and a textual equivalent which is stored in reasonPhrase.",
      "mark": "2",
      "options1": "status",
      "options2": "address",
      "options3": "statusResponse",
      "options4": "statusCode",
      "qsn": "Which of these data member of HttpResponse class is used to store the response from a http server?",
      "qsnNumber": "414"
    },
    {
      "correctAns": "3",
      "explaination": "The Datagrams are the bundle of information passed between machines.",
      "mark": "2",
      "options1": "Mime",
      "options2": "Cache",
      "options3": "Datagrams",
      "options4": "DatagramSocket",
      "qsn": "Which of these is a bundle of information passed between machines?",
      "qsnNumber": "415"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "DatagramPacket",
      "options2": "DatagramSocket",
      "options3": "All of the mentioned",
      "options4": "None of the mentioned",
      "qsn": "Which of these class is necessary to implement datagrams?",
      "qsnNumber": "416"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "port()",
      "options2": "getPort()",
      "options3": "findPort()",
      "options4": "recievePort()",
      "qsn": "Which of these method of DatagramPacket is used to find the port number?",
      "qsnNumber": "417"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "getData()",
      "options2": "getBytes()",
      "options3": "getArray()",
      "options4": "recieveBytes()",
      "qsn": "Which of these method of DatagramPacket is used to obtain the byte array of data contained in a datagram?",
      "qsnNumber": "418"
    },
    {
      "correctAns": "4",
      "explaination": "getLength returns the length of the valid data contained in the byte array that would be returned from the getData () method. This typically is not equal to length of whole byte array.",
      "mark": "2",
      "options1": "getnumber()",
      "options2": "length()",
      "options3": "Length()",
      "options4": "getLength()",
      "qsn": "Which of these method of DatagramPacket is used to find the length of byte array?",
      "qsnNumber": "419"
    },
    {
      "correctAns": "4",
      "explaination": "By using 5 classes we can send and receive data between client and server, these are InetAddress, Socket, ServerSocket, DatagramSocket, and DatagramPacket.",
      "mark": "2",
      "options1": "InetAdress",
      "options2": "DatagramPacket",
      "options3": "DatagramSocket",
      "options4": "All of the mentioned",
      "qsn": "Which of these class must be used to send a datagram packets over a connection?",
      "qsnNumber": "420"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "findAddress()",
      "options2": "getAddress()",
      "options3": "Address()",
      "options4": "whois()",
      "qsn": "Which of these method of DatagramPacket class is used to find the destination address?",
      "qsnNumber": "421"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "DatagramPacket",
      "options2": "DatagramSocket",
      "options3": "InetAddress",
      "options4": "ServerSocket",
      "qsn": "Which of these is a return type of getAddress() method of DatagramPacket class?",
      "qsnNumber": "422"
    },
    {
      "correctAns": "1",
      "explaination": "getSocketAddress() is used to get the socket address.",
      "mark": "2",
      "options1": "getSocketAddress()",
      "options2": "getAddress()",
      "options3": "address()",
      "options4": "none of the mentioned",
      "qsn": "Which API gets the SocketAddress (usually IP address + port number) of the remote host that this packet is being sent to or is coming from?",
      "qsnNumber": "423"
    },
    {
      "correctAns": "3",
      "explaination": "ArrayList class implements a dynamic array by extending AbstractList class.",
      "mark": "2",
      "options1": "AbstractList",
      "options2": "LinkedList",
      "options3": "ArrayList",
      "options4": "AbstractSet",
      "qsn": "Which of these standard collection classes implements a dynamic array?",
      "qsnNumber": "424"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "ArrayList()",
      "options2": "DynamicList()",
      "options3": "LinkedList()",
      "options4": "MallocList()",
      "qsn": "Which of these class can generate an array which can increase and decrease in size automatically?",
      "qsnNumber": "425"
    },
    {
      "correctAns": "4",
      "explaination": "When we add an element, the capacity of ArrayList object increases automatically, but we can increase it manually to specified length x by using function ensureCapacity(x);.",
      "mark": "2",
      "options1": "Capacity()",
      "options2": "increaseCapacity()",
      "options3": "increasecapacity()",
      "options4": "ensureCapacity()",
      "qsn": "Which of these method can be used to increase the capacity of ArrayList object manually?",
      "qsnNumber": "426"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "size()",
      "options2": "length()",
      "options3": "index()",
      "options4": "capacity()",
      "qsn": "Which of these method of ArrayList class is used to obtain present size of an object?",
      "qsnNumber": "427"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "Array()",
      "options2": "covertArray()",
      "options3": "toArray()",
      "options4": "covertoArray()",
      "qsn": "Which of these methods can be used to obtain a static array from an ArrayList object?",
      "qsnNumber": "428"
    },
    {
      "correctAns": "4",
      "explaination": "trimTosize() is used to reduce the size of the array that underlines an ArrayList object.",
      "mark": "2",
      "options1": "trim()",
      "options2": "trimSize()",
      "options3": "trimTosize()",
      "options4": "trimToSize()",
      "qsn": "Which of these method is used to reduce the capacity of an ArrayList object?",
      "qsnNumber": "429"
    },
    {
      "correctAns": "4",
      "explaination": "Vector implements AbstractList which internally implements Collection. Others come from implementing Map interface.",
      "mark": "2",
      "options1": "HashMap",
      "options2": "Hashtable",
      "options3": "EnumMap",
      "options4": "Vector",
      "qsn": "Which of the below does not implement Map interface?",
      "qsnNumber": "430"
    },
    {
      "correctAns": "1",
      "explaination": "IdentityHashMap is rarely used as it violates the basic contract of implementing equals() and hashcode() method.",
      "mark": "2",
      "options1": "Reference equality",
      "options2": "Name equality",
      "options3": "Hashcode equality",
      "options4": "Length equality",
      "qsn": "What is the premise of equality for IdentityHashMap?",
      "qsnNumber": "431"
    },
    {
      "correctAns": "1",
      "explaination": "HashMap always contains unique keys. If same key is inserted again, the new object replaces the previous object.",
      "mark": "2",
      "options1": "The new object replaces the older object",
      "options2": "The new object is discarded",
      "options3": "The old object is removed from the map",
      "options4": "It throws an exception as the key already exists in the map",
      "qsn": "What happens if we put a key object in a HashMap which exists?",
      "qsnNumber": "432"
    },
    {
      "correctAns": "2",
      "explaination": "The key is hashed twice; first by hashCode() of Object class and then by internal hashing method of HashMap class.",
      "mark": "2",
      "options1": "1",
      "options2": "2",
      "options3": "3",
      "options4": "unlimited till bucket is found",
      "qsn": "While finding correct location for saving key value pair, how many times key is hashed?",
      "qsnNumber": "433"
    },
    {
      "correctAns": "1",
      "explaination": "The code will throw ConcurrentModificationException if two threads access the same hashmap at the same time.",
      "mark": "2",
      "options1": "ConcurrentModificationException",
      "options2": "NullPointerException",
      "options3": "ClassNotFoundException",
      "options4": "RuntimeException",
      "qsn": "If two threads access the same hashmap at the same time, what would happen?",
      "qsnNumber": "434"
    },
    {
      "correctAns": "3",
      "explaination": "Collections.synchronizedMap() synchronizes entire map. ConcurrentHashMap provides thread safety without synchronizing entire map.",
      "mark": "2",
      "options1": "HashMap.synchronize(HashMap a);",
      "options2": "HashMap a = new HashMap();a.synchronize();",
      "options3": "Collections.synchronizedMap(new HashMap<String, String>());",
      "options4": "Collections.synchronize(new HashMap<String, String>());",
      "qsn": "How to externally synchronize hashmap?",
      "qsnNumber": "435"
    },
    {
      "correctAns": "1",
      "explaination": "BalancedTree will improve performance from O(n) to O(log n) by reducing hash collisions.",
      "mark": "2",
      "options1": "The bucket will switch from LinkedList to BalancedTree",
      "options2": "The bucket will increase its size by a factor of load size defined",
      "options3": "The LinkedList will be replaced by another hashmap",
      "options4": "Any further addition throws Overflow exception",
      "qsn": "If large number of items are stored in hash bucket, what happens to the internal structure?",
      "qsnNumber": "436"
    },
    {
      "correctAns": "3",
      "explaination": "There are 2 ways to remove an object from ArrayList. We can use overloaded method remove(int index) or remove(Object obj). We can also use an Iterator to remove the object.",
      "mark": "2",
      "options1": "remove() method",
      "options2": "using Iterator",
      "options3": "remove() method and using Iterator",
      "options4": "delete() method",
      "qsn": "How can we remove an object from ArrayList?",
      "qsnNumber": "437"
    },
    {
      "correctAns": "1",
      "explaination": "Duplicate elements are allowed in List. Set contains unique objects.",
      "mark": "2",
      "options1": "HashSet<String> listToSet = new HashSet<String>(duplicateList);",
      "options2": "HashSet<String> listToSet = duplicateList.toSet();",
      "options3": "HashSet<String> listToSet = Collections.convertToSet(duplicateList);",
      "options4": "HashSet<String> listToSet = duplicateList.getSet();",
      "qsn": "How to remove duplicates from List?",
      "qsnNumber": "438"
    },
    {
      "correctAns": "2",
      "explaination": "Collections provides a method to sort the list. The order of sorting can be defined using Comparator.",
      "mark": "2",
      "options1": "Collection.sort(listObj);",
      "options2": "Collections.sort(listObj);",
      "options3": "listObj.sort();",
      "options4": "Sorter.sortAsc(listObj);",
      "qsn": "How to sort elements of ArrayList?",
      "qsnNumber": "439"
    },
    {
      "correctAns": "2",
      "explaination": "ArrayList is not synchronized. Vector is the synchronized data structure.",
      "mark": "2",
      "options1": "Both are able to access the object",
      "options2": "ConcurrentModificationException is thrown",
      "options3": "One thread is able to access the object and second thread gets Null Pointer exception",
      "options4": "One thread is able to access the object and second thread will wait till control is passed to second one",
      "qsn": "When two threads access the same ArrayList object what is the outcome of program?",
      "qsnNumber": "440"
    },
    {
      "correctAns": "3",
      "explaination": "List returned by Arrays.asList() is a fixed length list which doesn’t allow us to add or remove element from it.add() and remove() method will throw UnSupportedOperationException if used.",
      "mark": "2",
      "options1": "Both are same",
      "options2": "Arrays.asList() throws compilation error",
      "options3": "Arrays.asList() returns a fixed length list and doesn’t allow to add or remove elements",
      "options4": "We cannot access the list returned using Arrays.asList()",
      "qsn": "How is Arrays.asList() different than the standard way of initialising List?",
      "qsnNumber": "441"
    },
    {
      "correctAns": "4",
      "explaination": "length() returns the capacity of ArrayList and size() returns the actual number of elements stored in the list which is always less than or equal to capacity.",
      "mark": "2",
      "options1": "length() and size() return the same value",
      "options2": "length() is not defined in ArrayList",
      "options3": "size() is not defined in ArrayList",
      "options4": "length() returns the capacity of ArrayList and size() returns the actual number of elements stored in the list",
      "qsn": "What is the difference between length() and size() of ArrayList?",
      "qsnNumber": "442"
    },
    {
      "correctAns": "2",
      "explaination": "CopyOnWriteArrayList is a concurrent collection class. Its very efficient if ArrayList is mostly used for reading purpose, because it allows multiple threads to read data without locking, which was not possible with synchronized ArrayList.",
      "mark": "2",
      "options1": "ArrayList",
      "options2": "CopyOnWriteArrayList",
      "options3": "HashList",
      "options4": "List",
      "qsn": "Which class provides thread safe implementation of List?",
      "qsnNumber": "443"
    },
    {
      "correctAns": "4",
      "explaination": "SessionList is not an implementation of List interface. The others are concrete classes of List.",
      "mark": "2",
      "options1": "RoleUnresolvedList",
      "options2": "Stack",
      "options3": "AttibuteList",
      "options4": "SessionList",
      "qsn": "Which of the below is not an implementation of List interface?",
      "qsnNumber": "444"
    },
    {
      "correctAns": "2",
      "explaination": "ArrayList has O(1) complexity for accessing an element in ArrayList. O(n) is the complexity for accessing an element from LinkedList.",
      "mark": "2",
      "options1": "O(n)",
      "options2": "O(1)",
      "options3": "O(nlogn)",
      "options4": "O(2)",
      "qsn": "What is the worst case complexity of accessing an element in ArrayList?",
      "qsnNumber": "445"
    },
    {
      "correctAns": "1",
      "explaination": "Immutable Set is useful in multithreaded environment. One does not need to declare generic type collection. It is inferred by the context of method call.",
      "mark": "2",
      "options1": "Immutable Set",
      "options2": "Mutable Set",
      "options3": "The type of Set depends on the parameter passed to the emptySet() method",
      "options4": "Null object",
      "qsn": "What does Collections.emptySet() return?",
      "qsnNumber": "446"
    },
    {
      "correctAns": "3",
      "explaination": "We should not set the initial capacity too high and load factor too low if iteration performance is needed.",
      "mark": "2",
      "options1": "10, 1.0",
      "options2": "32, 0.75",
      "options3": "16, 0.75",
      "options4": "32, 1.0",
      "qsn": "What is the initial capacity and load factor of HashSet?",
      "qsnNumber": "447"
    },
    {
      "correctAns": "1",
      "explaination": "HashSet is implemented to provide uniqueness feature which is not provided by HashMap. This also reduces code duplication and provides the memory efficient behavior of HashMap.",
      "mark": "2",
      "options1": "HashSet internally implements HashMap",
      "options2": "HashMap internally implements HashSet",
      "options3": "HashMap is the interface; HashSet is the concrete class",
      "options4": "HashSet is the interface; HashMap is the concrete class",
      "qsn": "What is the relation between hashset and hashmap?",
      "qsnNumber": "448"
    },
    {
      "correctAns": "4",
      "explaination": "SortedSet is an interface. It maintains an ordered set of elements. TreeSet is an implementation of SortedSet.",
      "mark": "2",
      "options1": "TreeSet is more efficient than SortedSet",
      "options2": "SortedSet is more efficient than TreeSet",
      "options3": "TreeSet is an interface; SortedSet is a concrete class",
      "options4": "SortedSet is an interface; TreeSet is a concrete class",
      "qsn": "What is the difference between TreeSet and SortedSet?",
      "qsnNumber": "449"
    },
    {
      "correctAns": "1",
      "explaination": "TreeSet provides fail-fast iterator. Hence when concurrently modifying TreeSet it throws ConcurrentModificationException.",
      "mark": "2",
      "options1": "ConcurrentModificationException is thrown",
      "options2": "Both threads can perform action successfully",
      "options3": "FailFastException is thrown",
      "options4": "IteratorModificationException is thrown",
      "qsn": "What happens if two threads simultaneously modify TreeSet?",
      "qsnNumber": "450"
    },
    {
      "correctAns": "2",
      "explaination": "Set is a collection of unique elements.HashSet has the behavior of Set and stores key value pairs. The LinkedHashSet stores the key value pairs in the order of insertion.",
      "mark": "2",
      "options1": "It is not a valid class",
      "options2": "It maintains the insertion order and guarantees uniqueness",
      "options3": "It provides a way to store key values with uniqueness",
      "options4": "The elements in the collection are linked to each other",
      "qsn": "What is the unique feature of LinkedHashSet?",
      "qsnNumber": "451"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "AbstractList",
      "options2": "LinkedList",
      "options3": "HashSet",
      "options4": "AbstractSet",
      "qsn": "Which of these standard collection classes implements a linked list data structure?",
      "qsnNumber": "452"
    },
    {
      "correctAns": "2",
      "explaination": "HashSet and TreeSet implements Set interface where as LinkedList and ArrayList implements List interface.",
      "mark": "2",
      "options1": "ArrayList",
      "options2": "HashSet",
      "options3": "LinkedList",
      "options4": "DynamicList",
      "qsn": "Which of these classes implements Set interface?",
      "qsnNumber": "453"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "add()",
      "options2": "first()",
      "options3": "AddFirst()",
      "options4": "addFirst()",
      "qsn": "Which of these method is used to add an element to the start of a LinkedList object?",
      "qsnNumber": "454"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "add()",
      "options2": "Add()",
      "options3": "addFirst()",
      "options4": "insert()",
      "qsn": "Which of these method of HashSet class is used to add elements to its object?",
      "qsnNumber": "455"
    },
    {
      "correctAns": "3",
      "explaination": "removeLast() and removeFirst() methods are used to remove elements in end and beginning of a linked list.",
      "mark": "2",
      "options1": "remove()",
      "options2": "delete()",
      "options3": "removeLast()",
      "options4": "deleteLast()",
      "qsn": "Which of these methods can be used to delete the last element in a LinkedList object?",
      "qsnNumber": "456"
    },
    {
      "correctAns": "2",
      "explaination": "An element in a LinkedList object can be changed by first using get() to obtain the index or location of that object and the passing that location to method set() along with its new value.",
      "mark": "2",
      "options1": "change()",
      "options2": "set()",
      "options3": "redo()",
      "options4": "add()",
      "qsn": "Which of these method is used to change an element in a LinkedList Object?",
      "qsnNumber": "457"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "Hash table",
      "options2": "Map",
      "options3": "Array",
      "options4": "String",
      "qsn": "Which of these object stores association between keys and values?",
      "qsnNumber": "458"
    },
    {
      "correctAns": "2",
      "explaination": "AbstractMap, WeakHashMap, HashMap and TreeMap provide implementation of map interface.",
      "mark": "2",
      "options1": "ArrayList",
      "options2": "HashMap",
      "options3": "LinkedList",
      "options4": "DynamicList",
      "qsn": "Which of these classes provide implementation of map interface?",
      "qsnNumber": "459"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "delete()",
      "options2": "remove()",
      "options3": "clear()",
      "options4": "removeAll()",
      "qsn": "Which of these method is used to remove all keys/values pair from the invoking map?",
      "qsnNumber": "460"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "search()",
      "options2": "get()",
      "options3": "set()",
      "options4": "look()",
      "qsn": "Which of these method Map class is used to obtain an element in the map having specified key?",
      "qsnNumber": "461"
    },
    {
      "correctAns": "4",
      "explaination": "keySet() methods is used to get a set containing all the keys used in a map. This method provides set view of the keys in the invoking map.",
      "mark": "2",
      "options1": "getAll()",
      "options2": "getKeys()",
      "options3": "keyall()",
      "options4": "keySet()",
      "qsn": "Which of these methods can be used to obtain set of all keys in a map?",
      "qsnNumber": "462"
    },
    {
      "correctAns": "1",
      "explaination": "Maps revolve around two basic operations – get() and put(). to put a value into a map, use put(), specifying the key and the value. To obtain a value, call get() , passing the key as an argument. The value is returned.",
      "mark": "2",
      "options1": "put()",
      "options2": "set()",
      "options3": "redo()",
      "options4": "add()",
      "qsn": "Which of these method is used add an element and corresponding key to a map?",
      "qsnNumber": "463"
    },
    {
      "correctAns": "4",
      "explaination": "Vectors are dynamic arrays, it contains many legacy methods that are not part of collection framework, and hence these methods are not present in ArrayList. But both are used to form dynamic arrays.",
      "mark": "2",
      "options1": "ArrayList",
      "options2": "Map",
      "options3": "Vector",
      "options4": "ArrayList & Vector",
      "qsn": "Which of these class object can be used to form a dynamic array?",
      "qsnNumber": "464"
    },
    {
      "correctAns": "4",
      "explaination": "Stack, Hashtable, Vector, Properties and Dictionary are legacy classes.",
      "mark": "2",
      "options1": "Stack",
      "options2": "Hashtable",
      "options3": "Vector",
      "options4": "All of the mentioned",
      "qsn": "Which of these are legacy classes?",
      "qsnNumber": "465"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "Map",
      "options2": "Enumeration",
      "options3": "HashMap",
      "options4": "Hashtable",
      "qsn": "Which of these is the interface of legacy?",
      "qsnNumber": "466"
    }
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "length",
      "options2": "elements",
      "options3": "elementCount",
      "options4": "capacity",
      "qsn": "What is the name of data member of class Vector which is used to store number of elements in the vector?",
      "qsnNumber": "467"
    },
    {
      "correctAns": "4",
      "explaination": "addElement() is used to add data in the vector, to obtain the data we use elementAt() and to first and last element we use firstElement() and lastElement() respectively.",
      "mark": "2",
      "options1": "add()",
      "options2": "set()",
      "options3": "AddElement()",
      "options4": "addElement()",
      "qsn": "Which of these methods is used to add elements in vector at specific location?",
      "qsnNumber": "468"
    },
    {
      "correctAns": "4",
      "explaination": "Dictionary, Map & Hashtable all implement Map interface hence all of them uses keys to store value in the object.",
      "mark": "2",
      "options1": "Dictionary",
      "options2": "Map",
      "options3": "Hashtable",
      "options4": "All of the mentioned",
      "qsn": "Which of these class object uses key to store value?",
      "qsnNumber": "469"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "put()",
      "options2": "set()",
      "options3": "insertElement()",
      "options4": "addElement()",
      "qsn": "Which of these method is used to insert value and its key?",
      "qsnNumber": "470"
    },
    {
      "correctAns": "1",
      "explaination": "Dictionary, Map & Hashtable all implement Map interface hence all of them uses keys to store value in the object.",
      "mark": "2",
      "options1": "Map",
      "options2": "Enumeration",
      "options3": "HashMap",
      "options4": "Hashtable",
      "qsn": "Which of these is the interface of legacy is implemented by Hashtable and Dictionary classes?",
      "qsnNumber": "471"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "Array",
      "options2": "ArrayList",
      "options3": "Dictionary",
      "options4": "Properties",
      "qsn": "Which of these is a class which uses String as a key to store the value in object?",
      "qsnNumber": "472"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "get()",
      "options2": "Elementat()",
      "options3": "ElementAt()",
      "options4": "getProperty()",
      "qsn": "Which of these methods is used to retrieve the elements in properties object at specific location?",
      "qsnNumber": "473"
    },
    {
      "correctAns": "1",
      "explaination": "Bitset class creates a special type of array that holds bit values. This array can increase in size as needed.",
      "mark": "2",
      "options1": "Bitset",
      "options2": "Map",
      "options3": "Hashtable",
      "options4": "All of the mentioned",
      "qsn": "Which of these class object has architecture similar to that of array?",
      "qsnNumber": "474"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "put()",
      "options2": "set()",
      "options3": "remove()",
      "options4": "clear()",
      "qsn": "Which of these method is used to make a bit zero specified by the index?",
      "qsnNumber": "475"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "size()",
      "options2": "length()",
      "options3": "indexes()",
      "options4": "numberofBits()",
      "qsn": "Which of these method is used to calculate number of bits required to hold the BitSet object?",
      "qsnNumber": "476"
    },
    {
      "correctAns": "3",
      "explaination": "before() returns true if the invoking Date object contains a date that is earlier than one specified by date, otherwise it returns false.",
      "mark": "2",
      "options1": "after()",
      "options2": "contains()",
      "options3": "before()",
      "options4": "compareTo()",
      "qsn": "Which of these is a method of class Date which is used to search whether object contains a date before the specified date?",
      "qsnNumber": "477"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "get()",
      "options2": "Elementat()",
      "options3": "ElementAt()",
      "options4": "getProperty()",
      "qsn": "Which of these methods is used to retrieve elements in BitSet object at specific location?",
      "qsnNumber": "478"
    },
    {
      "correctAns": "1",
      "explaination": "Remote method invocation RMI allows us to invoke a method of java object that executes on another machine..",
      "mark": "2",
      "options1": "RMI allows us to invoke a method of java object that executes on another machine",
      "options2": "RMI allows us to invoke a method of java object that executes on another Thread in multithreaded programming",
      "options3": "RMI allows us to invoke a method of java object that executes parallely in same machine",
      "options4": "None of the mentioned",
      "qsn": "What is Remote method invocation (RMI)?",
      "qsnNumber": "479"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "java.applet",
      "options2": "java.rmi",
      "options3": "java.lang.rmi",
      "options4": "java.lang.reflect",
      "qsn": "Which of these package is used for remote method invocation?",
      "qsnNumber": "480"
    },
    {
      "correctAns": "4",
      "explaination": "Remote class does not define any methods, its purpose is simply to indicate that an interface uses remote methods.",
      "mark": "2",
      "options1": "checkIP()",
      "options2": "addLocation()",
      "options3": "AddServer()",
      "options4": "None of the mentioned",
      "qsn": "Which of these methods are member of Remote class?",
      "qsnNumber": "481"
    },
    {
      "correctAns": "1",
      "explaination": "All remote methods throw RemoteException.",
      "mark": "2",
      "options1": "RemoteException",
      "options2": "InputOutputException",
      "options3": "RemoteAccessException",
      "options4": "RemoteInputOutputException",
      "qsn": "Which of these Exceptions is thrown by remote method?",
      "qsnNumber": "482"
    },
    {
      "correctAns": "3",
      "explaination": "None.",
      "mark": "2",
      "options1": "serverClientjava",
      "options2": "Client.java",
      "options3": "AddClient.java",
      "options4": "ServerClient.java",
      "qsn": "Which of these class is used for creating a client for a server-client operations?",
      "qsnNumber": "483"
    },
    {
      "correctAns": "1",
      "explaination": "java.text provides capabilities for formatting, searching and manipulating text.",
      "mark": "2",
      "options1": "java.text",
      "options2": "java.awt",
      "options3": "java.lang.text",
      "options4": "java.text.modify",
      "qsn": "Which of these package is used for all the text related modifications?",
      "qsnNumber": "484"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "java.lang",
      "options2": "java.util",
      "options3": "java.net",
      "options4": "java.awt",
      "qsn": "Which of these packages contain all the collection classes?",
      "qsnNumber": "485"
    },
    {
      "correctAns": "1",
      "explaination": "Maps is not a part of collection framework.",
      "mark": "2",
      "options1": "Maps",
      "options2": "Array",
      "options3": "Stack",
      "options4": "Queue",
      "qsn": "Which of these classes is not part of Java’s collection framework?",
      "qsnNumber": "486"
    },
    {
      "correctAns": "4",
      "explaination": "SortedList is not a part of collection framework.",
      "mark": "2",
      "options1": "List",
      "options2": "Set",
      "options3": "SortedMap",
      "options4": "SortedList",
      "qsn": "Which of these interface is not a part of Java’s collection framework?",
      "qsnNumber": "487"
    },
    {
      "correctAns": "1",
      "explaination": "clear() method removes all the elements from invoking collection.",
      "mark": "2",
      "options1": "clear()",
      "options2": "reset()",
      "options3": "delete()",
      "options4": "refresh()",
      "qsn": "Which of these methods deletes all the elements from invoking collection?",
      "qsnNumber": "488"
    },
    {
      "correctAns": "1",
      "explaination": "A collection is a group of objects, it is similar to String Template Library (STL) of C++ programming language.",
      "mark": "2",
      "options1": "A group of objects",
      "options2": "A group of classes",
      "options3": "A group of interfaces",
      "options4": "None of the mentioned",
      "qsn": "What is Collection in Java?",
      "qsnNumber": "489"
    },
    {
      "correctAns": "3",
      "explaination": "hasNext() returns boolean values true or false.",
      "mark": "2",
      "options1": "Integer",
      "options2": "Double",
      "options3": "Boolean",
      "options4": "Collections Object",
      "qsn": "Which of these return type of hasNext() method of an iterator?",
      "qsnNumber": "490"
    },
    {
      "correctAns": "4",
      "explaination": "To obtain an iterator to the start of the start of the collection we use iterator() method.",
      "mark": "2",
      "options1": "start()",
      "options2": "begin()",
      "options3": "iteratorSet()",
      "options4": "iterator()",
      "qsn": "Which of these methods is used to obtain an iterator to the start of collection?",
      "qsnNumber": "491"
    },
    {
      "correctAns": "1",
      "explaination": "None.",
      "mark": "2",
      "options1": "next()",
      "options2": "move()",
      "options3": "shuffle()",
      "options4": "hasNext()",
      "qsn": "Which of these methods can be used to move to next element in a collection?",
      "qsnNumber": "492"
    },
    {
      "correctAns": "2",
      "explaination": "None.",
      "mark": "2",
      "options1": "Setiterator",
      "options2": "ListIterator",
      "options3": "Literator",
      "options4": "None of the mentioned",
      "qsn": "Which of these iterators can be used only with List?",
      "qsnNumber": "493"
    },
    {
      "correctAns": "2",
      "explaination": "previousIndex() returns index of previous element. if there is no previous element then -1 is returned.",
      "mark": "2",
      "options1": "previous()",
      "options2": "previousIndex()",
      "options3": "back()",
      "options4": "goBack()",
      "qsn": "Which of these is a method of ListIterator used to obtain index of previous element?",
      "qsnNumber": "494"
    },
    {
      "correctAns": "4",
      "explaination": "None.",
      "mark": "2",
      "options1": "IOException",
      "options2": "SystemException",
      "options3": "ObjectNotFoundExeception",
      "options4": "IllegalStateException",
      "qsn": "Which of these exceptions is thrown by remover() method?",
      "qsnNumber": "495"
    },
    {
      "correctAns": "2",
      "explaination": "BlockingQueue, TransferQueue and BlockingQueue are subinterfaces of Queue.",
      "mark": "2",
      "options1": "BlockingQueue",
      "options2": "BlockingEnque",
      "options3": "TransferQueue",
      "options4": "BlockingQueue",
      "qsn": "Which of the below is not a subinterface of Queue?",
      "qsnNumber": "496"
    },
    {
      "correctAns": "1",
      "explaination": "A BlockingQueue without any intrinsic capacity constraints always reports a remaining capacity of Integer.MAX_VALUE.",
      "mark": "2",
      "options1": "Integer.MAX_VALUE",
      "options2": "BigDecimal.MAX_VALUE",
      "options3": "99999999",
      "options4": "Integer.INFINITY",
      "qsn": "What is the remaining capacity of BlockingQueue whose intrinsic capacity is not defined?",
      "qsnNumber": "497"
    },
    {
      "correctAns": "3",
      "explaination": "dequeue() removes the item next in line. peek() returns the item without removing it from the queue.",
      "mark": "2",
      "options1": "dequeue() and peek() remove and return the next time in line",
      "options2": "dequeue() and peek() return the next item in line",
      "options3": "dequeue() removes and returns the next item in line while peek() returns the next item in line",
      "options4": "peek() removes and returns the next item in line while dequeue() returns the next item in line",
      "qsn": "What is difference between dequeue() and peek() function of java?",
      "qsnNumber": "498"
    },
    {
      "correctAns": "1",
      "explaination": "Stack is Last in First out (LIFO) and Queue is First in First out(FIFO).",
      "mark": "2",
      "options1": "Stack is LIFO; Queue is FIFO",
      "options2": "Queue is LIFO; Stack is FIFO",
      "options3": "Stack and Queue is FIFO",
      "options4": "Stack and Queue is LIFO",
      "qsn": "What is the difference between Queue and Stack?",
      "qsnNumber": "499"
    },
    {
      "correctAns": "3",
      "explaination": "CircularQueue implementation is an abstract class where first and rear pointer point to the same object.",
      "mark": "2",
      "options1": "Front pointer points to first element; rear pointer points to the last element",
      "options2": "Rear pointer points to first element; front pointer points to the last element",
      "options3": "Front and read pointers point to the first element",
      "options4": "Front pointer points to the first element; rear pointer points to null object",
      "qsn": "What is the use of front and rear pointers in CircularQueue implementation?",
      "qsnNumber": "500"
    }
  ],
  "users": "users"
}
